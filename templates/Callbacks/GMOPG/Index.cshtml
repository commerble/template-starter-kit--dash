@functions {
    public class LineViewModel {
        public int ProductId { get; set; }
        public string Name { get; set; }
        public int Qty { get; set; }
        public string DisplayName { get; set; }
        public string Icon { get; set; }
        public string Size { get; set; }
        public string Color { get; set; }
    }

    List<LineViewModel> LoadViewModel(PurchaseOrder order) {
        var types = new [] { OrderLineType.NormalOrder, OrderLineType.SetProductParent };
        var items = order.Items.Where(item => types.Contains(item.OrderLineType));
        var productIds = items.Select(item => item.ProductId).ToArray();
        var productPages = Database.Query(new { Now, Next }, (db, args)=> 
            from p in db.ProductPages
            join r in db.ProductRelations on p.Code equals r.ProductPageCode
            join s in db.Products on r.ProductExternalId1 equals s.ExternalId1
            where productIds.Contains(s.Id)
            select new {
                ProductId = s.Id,
                p.Code,
                p.Name,
                s.Size,
                s.Color,
                PageIcon = p.Icon,
                ProductIcon = s.Icon
            }
        ).ToList();
        
        return items.Select(item => {
                        var productPage = productPages.Where(p => p.ProductId == item.ProductId).FirstOrDefault();
                        return new LineViewModel {
                            ProductId = item.ProductId,
                            Name = item.Product.Name,
                            Qty = item.OrderAmount,
                            DisplayName = productPage?.Name,
                            Icon = productPage?.ProductIcon ?? productPage?.PageIcon,
                            Size = productPage?.Size,
                            Color = productPage?.Color,
                        };
                    }).ToList();
    }
}
@{
    Page.NoCache = true;

    if (!IsPost) {
        throw new System.Web.HttpException(404, "Not Found");
    }

    long id;
    if (!long.TryParse(Page.Request.Form["OrderID"], out id)) {
        throw new System.Web.HttpException(400, "Bad Request");
    }

    var service = Commerble.TypeResolver.Resolve<IOrderService>();

    var order = service.GetPurchaseOrderById(id);
    if (order == null) {
        throw new System.Web.HttpException(400, "Bad Request");
    }

    if (string.IsNullOrEmpty(Page.Request.Form["ErrCode"])) {
        var checkString = Page.Request.Form["CheckString"] ?? string.Empty;
        string computeCheckString = null;
        PaymentStatus paymentStatus = PaymentStatus.Success;
        DateTime? autoCancelDate = null;
        var plain = string.Empty;
        var payType = Page.Request.Form["PayType"];
        if (payType == "0"){ // クレカ 
            plain = Page.Request.Form["OrderID"] + Page.Request.Form["Forwarded"] + Page.Request.Form["Method"] + Page.Request.Form["PayTimes"] + (Page.Request.Form["Approve"]+"       ").Substring(0,7) + Page.Request.Form["TranID"] + Page.Request.Form["TranDate"] + GetConfigValue("GMOPG_SHOP_PASSWORD");
        }
        else if (payType == "1") { // モバイル Suica 

        }
        else if (payType == "2") { //楽天 Edy

        }
        else if (payType == "3") { // コンビニ
            plain = Page.Request.Form["OrderID"] + Page.Request.Form["CvsCode"] + Page.Request.Form["CvsConfNo"] + Page.Request.Form["CvsReceiptNo"] + Page.Request.Form["PaymentTerm"] + Page.Request.Form["TranDate"] + GetConfigValue("GMOPG_SHOP_PASSWORD");
            autoCancelDate = DateTime.ParseExact(Page.Request.Form["PaymentTerm"], "yyyyMMddHHmmss", null);
            paymentStatus = PaymentStatus.Ready;
        }
        else if (payType == "4") { // Pay-easy
            
        }
        else if (payType == "5") { // PayPal
            
        }
        else if (payType == "6") { // iD
            
        }
        else if (payType == "7") { // WebMoney
            
        }
        else if (payType == "8") { // au
            plain = Page.Request.Form["OrderID"] + Page.Request.Form["TranID"] + Page.Request.Form["TranDate"] + GetConfigValue("GMOPG_SHOP_PASSWORD");
        }
        else if (payType == "9") { // docomo
            plain = Page.Request.Form["OrderID"] + Page.Request.Form["AccessID"] + Page.Request.Form["TranDate"] + GetConfigValue("GMOPG_SHOP_PASSWORD");
        }
        else if (payType == "B") { // softbank
            plain = Page.Request.Form["OrderID"] + Page.Request.Form["AccessID"] + Page.Request.Form["TranDate"] + GetConfigValue("GMOPG_SHOP_PASSWORD");
        }
        else if (payType == "E") { // JCB プリカ
            
        }
        else if (payType == "G") { // NET CASH・nanaco ギフト
            
        }
        else if (payType == "I") { // 楽天ペイ
            
        }
        else if (payType == "J") { // 多通貨クレジットカード（MCP）
            
        }
        else if (payType == "K") { // LINE Pay 決済
            
        }
        else if (payType == "L") { // ネット銀聯決済
            
        }
        else if (payType == "N") { // 銀行振込(バーチャル口座)
            
        }
        else if (payType == "O") { //リクルートかんたん支払い決済
            
        }
        else if (payType == "Z") { // PAYSLE 決済
            
        }
        else if (payType == "d") { // FamiPay
            
        }
        using (var md5 = new System.Security.Cryptography.MD5CryptoServiceProvider()) {
            var data = Encoding.GetEncoding(932).GetBytes(plain);
            var bs = md5.ComputeHash(data);
            computeCheckString = BitConverter.ToString(bs).ToLower().Replace("-", "");
            md5.Clear();
        }

        if (checkString != computeCheckString) {
            throw new System.Web.HttpException(400, "Bad Request");
        }

        service.UpdatePaymentStatus(order, paymentStatus, autoCancelDate);

        Page.Response.Redirect(PurchaseCompleteUrl(order.Items.First().Product.SalesPattern.CartId, id));
    }

    ViewBag.PageTitle = "お支払いキャンセル";
    var vm = LoadViewModel(order);
    var cartinUrl = Href("~/Order/Cart?") + string.Join("&", vm.Select(line => $"item={line.ProductId}&qty={line.Qty}"));
}
<main class="section content">
    <h1 class="h-underline">お支払いが完了されませんでした</h1>
    <div class="message-box">
        <p class="message lead">
            GMOペイメントゲートウェイにてお支払が完了されませんでしたので、この注文は自動的にキャンセルされます。<br>
            仮押さえしました在庫は、@(order.OrderCustomer.AutoCancelDate.Value.ToString("yyyy/MM/dd HH:mm:ss"))移行に戻されます。<br>
            またのご利用お待ちしております。
        </p>
        <div class="message block">
            <ul class="text-list-dot">
                <li>エラーコード：@Page.Request.Form["ErrCode"]</li>
                <li>エラー情報：@Page.Request.Form["ErrInfo"]</li>
            </ul>
        </div>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th colspan="2">商品</th>
                <th>個数</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var line in vm ) {
                <tr>
                    <td align="center">
                        <div class="product-icon">
                            <div class="image image-square">
                                <img src="@IconUrl(line.Icon)" alt="@SkuName(line.Name, line.DisplayName, line.Color, line.Size)">
                            </div>
                        </div>
                    </td>
                    <td align="center">
                        @SkuName(line.Name, line.DisplayName, line.Color, line.Size)
                    </td>
                    <td data-title="個数">
                        @line.Qty
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="block block-vertical">
        <a href="@cartinUrl" class="btn btn-action btn-large">もう一度カートにいれる</a>
        <a href="@Href("~/")" class="btn btn-primary btn-text btn-prev">トップページへ戻る</a>
    </div>
</main>
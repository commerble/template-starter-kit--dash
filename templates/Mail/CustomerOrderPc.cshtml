 @{
    var orderId = long.Parse((string)ViewBag.Parameters["orderId"]);
    var order= Database.EC.Single(
            db => db.PurchaseOrders
                .Include("OrderLines")
                .Include("OrderLines.Product")
                .Include("OrderCustomer")
                .Single(x => x.Id == orderId));

    Message.Subject = "注文受付のお知らせ";
}@order.OrderCustomer.LastName @order.OrderCustomer.FirstName 様

下記内容でご注文を承りましたのでご確認ください。

[注文番号] @orderId
■ ご注文内容

@foreach (var x in order.OrderLines)
{
<text>・@(x.Product.Name) x @(x.OrderAmount) @(FormatPrice(x.LinePrice))</text>
}

● 小計 (税込) : ¥@FormatPrice(order.OrderLines.Sum(x => x.LinePrice))
● 送料 : ¥@FormatPrice(order.DeliveryCharge)
● 代引手数料 : ¥@(FormatPrice(order.CashOnDeliveryCharge))
● 利用ポイント : @FormatPrice(order.TotalUsagePoint)
● 合計 : ¥@FormatPrice(order.TotalPayment)
● 付与ポイント : @FormatPrice(order.ChargePointSummary ?? 0)

注文受付日時 : @order.OrderDate.ToString("yyyy/MM/dd HH:mm:ss")
決済方法 : @PaymentMethodText[order.PaymentMethod]

この度はお買い上げ誠にありがとうございました。

発送後、改めまして『商品発送のご案内』をお送りさせて頂きます。
発送まで今しばらくお待ち下さい。

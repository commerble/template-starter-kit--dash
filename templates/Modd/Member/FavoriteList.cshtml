@functions {
    public class ViewModel {
        public ViewMessages ViewMessages { get; set; }
        public bool HasNextPage { get; set; }
        public int Page { get; set; }
        public List<FavoriteViewModel> Favorites { get; set; }
    }
    public class FavoriteViewModel {
        public int ProductId { get; set; }
        public string Code { get; set; }
        public string Name { get; set; }
        public string Thumbnail { get; set; }
        public decimal? UnitPriceWithTax { get; set; }
        public bool? HasMultiplePrice { get; set; }
    }
    ViewModel LoadViewModel() {
        var favorites = Page.ViewData.Model as IEnumerable<Favorite>;
        var viewData = Page.ViewData[BasicController.ViewMessageKey] as ViewMessages;
        int page, eachPage = 10;
        if( !Int32.TryParse((Page.Request.QueryString["page"] ?? "0"), out page)){
            page = 0;
        }
        var total = favorites.Count();
        var pageCount = total / eachPage + ((total % eachPage == 0) ? 0 : 1);
        var pageLast = pageCount == 0 ? true : ( ((page+1) == pageCount) ? true : false);

        favorites = favorites.OrderByDescending(fav => fav.RegisterAt).Skip(page*eachPage).ToList();
        var productIds = favorites.Select(fav => fav.ProductId);
        var productPages = Database.Query(new { Now, Next, productIds }, db => 
            from s in db.Products
            join r in db.ProductRelations on s.ExternalId1 equals r.ProductExternalId1
            join p in db.ProductPages on r.ProductPageCode equals p.Code
            where productIds.Contains(s.Id)
            select new {
                s.Id,
                p.Code,
                p.Name,
                p.Thumbnail,
                p.PriceProductId,
                p.HasMultiplePrice,
            }
        );
        return new ViewModel {
            ViewMessages = viewData,
            HasNextPage = total > 0 && !pageLast,
            Page = page,
            Favorites = favorites.Select(f => {
                var productPage = productPages.FirstOrDefault(p => p.Id == f.ProductId);
                return new FavoriteViewModel {
                    ProductId = f.ProductId,
                    Code = productPage?.Code,
                    Name = productPage?.Name,
                    Thumbnail = productPage?.Thumbnail,
                    UnitPriceWithTax = productPage?.PriceProductId != null ? Page.Template.GetUnitPriceWithTax(productPage.PriceProductId.Value) : (decimal?)null,
                    HasMultiplePrice = productPage?.HasMultiplePrice,
                };
            }).ToList()
        };
    }
}
@{
    var vm = LoadViewModel();

    ViewBag.PageTitle = "お気に入り";
}
<main class="content-wide columns">
    <div class="col-3 col-order-2 col-order-1-sp">
        <h1 class="h-underline">お気に入り</h1>
        @DisplayViewMessages(vm.ViewMessages)
        @if (vm.Favorites.Any()) {
            <table class="table">
                <thead>
                    <tr>
                        <th colspan="2">商品</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var fav in vm.Favorites) {
                        <tr>
                            <td align="center">
                                <a href="@ItemUrl(fav.Code)" class="product-icon" title="@fav.Name">
                                    <div class="image image-square">
                                        <img src="@ThumbnailUrl(fav.Thumbnail)" alt="@fav.Name">
                                    </div>
                                </a>
                            </td>
                            <td align="center">
                                <a href="@ItemUrl(fav.Code)" class="product-icon" title="@fav.Name">
                                    @fav.Name <br>
                                    @PrintPrice(fav.UnitPriceWithTax)
                                </a>
                            </td>
                            <td align="center">
                                <a class="btn btn-primary btn-text" href="@Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Favorites", id=fav.ProductId })">削除</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            if (vm.HasNextPage) {
                <div class="block">
                    <a href="@Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Favorites", id=(int?)null })?page=@(vm.Page+1)" class="btn btn-primary btn-text btn-next">次のページ</a>
                </div>
            }
        } else {
            <div class="message-box">
                <p class="message text-center lead">お気に入り登録された商品はまだありません。</p>
            </div>
        }
    </div>
    <div class="col-1 col-order-1 col-order-2-sp">
        @Page.Html.Partial("ModdSharedMemberNav", null)
    </div>
</main>

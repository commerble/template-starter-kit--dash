@functions {
	public class ViewModel {
		public ViewMessages ViewMessages { get; set; }
		public bool HasNextPage { get; set; }
        public int Page { get; set; }
		public List<NoticeViewModel> Notices { get; set; }
	}
	public class NoticeViewModel {
		public long RequestId { get; set; }
		public int RequestQty { get; set; }
		public ReserveRequestStatus Status { get; set; }
		public string Code { get; set; }
		public string Name { get; set; }
		public string NamePart1 { get; set; }
		public string Icon { get; set; }
		public string NamePart3 { get; set; }
		public string NamePart2{ get; set; }
		public int ProductId { get; set; }
		public string ExternalId1 { get; set; }
		public decimal? UnitPriceWithTax { get; set; }
		public bool CanCartIn { get; set; }
		public bool CanCancel { get; set; }
	}
	ViewModel LoadViewModel() {
		var notices = Page.ViewData.Model as IEnumerable<ReserveRequest>;
		var viewData = Page.ViewData[BasicController.ViewMessageKey] as ViewMessages;
		int page, eachPage = 5;
		if( !Int32.TryParse((Page.Request.QueryString["page"] ?? "0"), out page)){
			page = 0;
		}
		var total = notices.Count();
        var pageCount = total / eachPage + ((total % eachPage == 0) ? 0 : 1);
        var pageLast = pageCount == 0 ? true : ( ((page+1) == pageCount) ? true : false);
		var statsSort = new Dictionary<ReserveRequestStatus,int>{
			{ReserveRequestStatus.Accept, 9},
			{ReserveRequestStatus.Allocated, 10},
			{ReserveRequestStatus.Purchased, 8},
			{ReserveRequestStatus.Cancel, 0}
		};
		notices = notices.OrderByDescending(n=> statsSort[n.Status] ).ThenByDescending(n=> n.ReserveRequestId).Skip(page*eachPage).Take(eachPage).ToList();
		var productIds = notices.Select(n => n.ProductId).ToList();
		var products = Database.Query(new { Now, Next, productIds }, db => (
			from p in db.SitePages
            join r in db.ProductRelations on p.Code equals r.PageCode
            join s in db.Products on r.ExternalId1 equals s.ExternalId1
            join d in db.ProductDetails on r.ExternalId1 equals d.ExternalId1
			where productIds.Contains(s.Id)
			select new {
				p.Code,
				s.Name,
				d.NamePart1,
				d.NamePart3,
				d.NamePart2,
				s.Id,
				s.ExternalId1,
				ProductIcon = d.Icon,
				PageIcon = p.Thumbnail
			}
		).Distinct());
		var canCancel = new List<ReserveRequestStatus>{
			ReserveRequestStatus.Accept,
			ReserveRequestStatus.Allocated
		};
		return new ViewModel {
			ViewMessages = viewData,
			HasNextPage = total > 0 && !pageLast,
            Page = page,
			Notices = notices.Select(n => {
				var sku = products.FirstOrDefault(p => p.Id == n.ProductId);
				return new NoticeViewModel {
					RequestId = n.ReserveRequestId,
					RequestQty = n.Amount,
					ProductId = n.ProductId,
					Status = n.Status,
					Code = sku?.Code,
					Name = sku?.Name,
					NamePart1 = sku?.NamePart1,
					Icon = !string.IsNullOrEmpty(sku?.ProductIcon) ? sku.ProductIcon : sku?.PageIcon,
					NamePart3 = sku?.NamePart3,
					NamePart2 = sku?.NamePart2,
					ExternalId1 = sku?.ExternalId1,
					UnitPriceWithTax = sku != null ? Page.Template.GetUnitPriceWithTax(sku.Id) : (decimal?)null,
					CanCartIn = n.Status == ReserveRequestStatus.Allocated,
					CanCancel = canCancel.Contains(n.Status)
				};
			}).ToList()
		};
	}
}
@{
	var vm = LoadViewModel();

	ViewBag.MetaTitle = "次回入荷予約";
}
<main class="content-wide columns">
    <div class="col-3 col-order-2 col-order-1-sp">
		<h1 class="h-underline">次回入荷予約</h1>
		@DisplayViewMessages(vm.ViewMessages)
		@if (vm.Notices.Any()) {
			<table class="table">
				<thead>
					<tr>
						<th colspan="2">商品</th>
						<th>個数</th>
						<th>ステータス</th>
						<th></th>
					</tr>
				</thead>
				<tbody>
					@foreach (var nt in vm.Notices) {
						<tr>
                            <td align="center">
                                <a href="@ItemUrl(nt.Code)" class="product-icon" title="@nt.Name">
                                    <div class="image image-square">
                                        <img src="@IconUrl(nt.Icon)" alt="@nt.Name">
                                    </div>
                                </a>
                            </td>
                            <td align="center">
                                <a href="@ItemUrl(nt.Code)" class="product-icon" title="@nt.Name">
                                    @SkuName(nt.Name, nt.NamePart1, nt.NamePart2, nt.NamePart3) <br>
                                    @PrintPrice(nt.UnitPriceWithTax)
                                </a>
                            </td>
							<td data-title="個数">
								@nt.RequestQty
							</td>
							<td data-title="ステータス">
								@ReserveRequestStatusText[nt.Status]
							</td>
                            <td align="center">
								@if (nt.CanCartIn) {
									<a href="@CartInUrl(nt.ProductId, nt.RequestId)" class="btn btn-action">カートイン</a>
								}
								@if (nt.CanCancel) {
									<a href="@ReserveUrl(nt.RequestId)" class="btn btn-primary btn-text">予約をキャンセル</a>
								}
                            </td>
                        </tr>
					}
				</tbody>
			</table>
			if (vm.HasNextPage) {
                <div class="block">
                    <a href="@ReserveUrl()?page=@(vm.Page+1)" class="btn btn-primary btn-text btn-next">次のページ</a>
                </div>
            }
		} else {
			<div class="message-box">
                <p class="message text-center lead">次回入荷を予約された商品はまだありません。</p>
            </div>
		}
    </div>
    <div class="col-1 col-order-1 col-order-2-sp">
        @Page.Html.Partial("ModdSharedMemberNav", null)
    </div>
</main>

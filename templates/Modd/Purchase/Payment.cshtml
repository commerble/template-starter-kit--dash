@{
    var payment = Page.ViewData.Model as VM.PurchasePayment;
    var viewData = Page.ViewData[BasicController.ViewMessageKey] as ViewMessages;
        
    var paymentMethods = new [] {
        new SelectListItem  { Text = PaymentMethodText[PaymentMethod.CashOnDelivery], Value = "CashOnDelivery", Selected = payment.PaymentMethod == PaymentMethod.CashOnDelivery },
        new SelectListItem  { Text = PaymentMethodText[PaymentMethod.Offsite], Value = "Offsite", Selected = payment.PaymentMethod == PaymentMethod.Offsite },
        new SelectListItem  { Text = PaymentMethodText[PaymentMethod.External], Value = "External", Selected = payment.PaymentMethod == PaymentMethod.External },
    }.Where(pm => payment.Cart.UsablePaymentMethod.Any(upm => upm.ToString() == pm.Value));

    ViewBag.MetaTitle = "カート - お支払い方法";
}
<main class="section content">
    <h1 class="h-underline">購入</h1>
    @DisplayViewMessages(viewData)
    <form action="@PurchasePaymentUrl(payment.CartId)" method="post">
        @Page.Html.Hidden("DeliveryOrder.WrappingType", 2)
        <h2 class="h-title">お届け日時</h2>
        <dl class="field optional">
            <dt class="field-title">お届け日</dt>
            <dd class="field-body">
                @if (payment.Cart.CanSpecifyDeliveryDate) {
                    @Page.Html.DropDownList("DeliveryOrder.DeliveryDate", payment.Cart.SelectDeliveryDate(), "最短でお届け", new {
                    })
                }
                else {
                    <p class="field-text">
                        @if (payment.Cart.DeliveryMethod == DeliveryMethod.Mail) {
                            <text>配送方法が「メール便」のため、</text>
                        }
                        else {
                            var items = payment.Cart.OrderItems.Where(item => !item.Product.SalesPattern.CansetDeliveryDate).Select(item => item.Product.Name).ToArray();
                            if (items.Length > 0) {
                                <text>@string.Join("、",items)が含まれているため、</text>
                            }
                        }
                        お届け日を指定できません。
                    </p>
                }
                @ValidationMessageFor("DeliveryOrder.DeliveryDate")
                @if (payment.Cart.LastReleaseDate > DateTime.Now) {
                    <p class="field-note">
                        ※発売日が異なる商品を同時（同一ご注文番号の場合）にご予約いただいた場合、<br />
                    &nbsp;発売日が最も遅い商品に合わせて全ての商品をお届けいたします。
                    </p>
                }
            </dd>
        </dl>
        <dl class="field optional">
            <dt class="field-title">お届け時間</dt>
            <dd class="field-body">
                @if (payment.Cart.CanSpecifyDeliveryTime) {
                    @Page.Html.DropDownList("DeliveryOrder.HourRange", payment.Cart.SelectHourRange(), new {})
                }
                else {
                    <p class="field-text">
                        @if (payment.Cart.DeliveryMethod == DeliveryMethod.Mail) {
                            <text>配送方法が「ゆうメール」のため、</text>
                        }
                        else {
                            var items = payment.Cart.OrderItems.Where(item => !item.Product.SalesPattern.CansetDeliveryHour).Select(item => item.Product.Name).ToArray();
                            if (items.Length > 0) {
                                <text>@string.Join("、",items)が含まれているため、</text>
                            }
                        }
                        お届け時間を指定できません。
                    </p>
                }
                @ValidationMessageFor("DeliveryOrder.HourRange")
            </dd>
        </dl>
        <h2 class="h-title">お支払方法</h2>
        <dl class="field required">
            <dt class="field-title">決済方法</dt>
            <dd class="field-body">
                @Page.Html.DropDownList("PaymentMethod", paymentMethods, "--選択してください--", new {
                    ic_action="changePaymentDetail;openAccordion;",
                    data_val = "true",
                    data_val_required = "決済方法は必須項目です。",
                })
                @Page.Html.Hidden("OrderCustomer.PaymentDetail", payment.OrderCustomer.PaymentDetail, new {
                    data_cashondelivery = "",
                    data_offsite = "",
                    data_external = "gmopg",
                })
                @ValidationMessageFor("PaymentMethod")
                <p class="field-note hide" data-accordion="CashOnDelivery">商品到着時に『商品代金』 ＋ 『荷造り送料』をお支払いください。<br>代金引換でのご注文の場合は、手数料一律330円(税込)がかかります。</p>
                <p class="field-note hide" data-accordion="Offsite">振込先銀行口座は注文確定メールにてお知らせいたします。</p>
                <p class="field-note hide" data-accordion="External">外部決済ページにて、クレジットカード、コンビニ前払い、コンビニ後払い、キャリア決済のいずれかの決済方法でお支払いください。</p>
            </dd>
        </dl>
        @if (!payment.IsAnonymous) {
        <h2 class="h-title">ポイント</h2>
        <p class="field-desc">現在の所持ポイントは<em>@(payment.Cart.Point)&nbsp;pt</em>です。<br>今回のご購入金額は<em>@(payment.Cart.TotalPayment.ToString("N0"))&nbsp;円</em>です。</p>
        <dl class="field optional">
            <dt class="field-title">ご利用ポイント</dt>
            <dd class="field-body">
                @Page.Html.TextBox("InputUsagePoint", 0, new {
                    type = "number",
                    min = 0,
                    max = Math.Min(payment.Cart.Point, payment.Cart.TotalPayment),
                    size = 5,
                    data_val = "true",
                    data_val_range = $"ご利用ポイント数は0-{Math.Min(payment.Cart.Point, payment.Cart.TotalPayment)}まで指定できます。",
                    data_val_range_min = 0,
                    data_val_range_max = Math.Min(payment.Cart.Point, payment.Cart.TotalPayment),
                })
                @ValidationMessageFor("InputUsagePoint")
            </dd>
        </dl>
        }
        <h2 class="h-title">クーポンのご利用</h2>
        <p class="field-desc">クーポンをお持ちの方は、コードをご入力ください。</p>
        <dl class="field optional">
            <dt class="field-title">クーポンコード</dt>
            <dd class="field-body">
                @Page.Html.TextBox("ServiceValues[CampaignCode]", payment.ServiceValues.ContainsKey("CampaignCode") ? payment.ServiceValues["CampaignCode"] : null, new {
                })
                @ValidationMessageFor("ServiceValues[CampaignCode]")
            </dd>
        </dl>
        <h2 class="h-title">備考</h2>
        <p class="field-desc">ご注文内容に関する補足がありましたら、ご記入ください</p>
        <dl class="field optional">
            <dt class="field-title">備考内容</dt>
            <dd class="field-body">
                @Page.Html.TextArea("ServiceValues[Remarks]", payment.ServiceValues.ContainsKey("Remarks") ? payment.ServiceValues["Remarks"] : null, new {
                    data_val = "true",
                    data_val_regex = "備考内容に半角の「<」「>」「&#」を含めることはできません。",
                    data_val_regex_pattern = "^(?!(.|\n|\r)*(&#|[<>]))(.|\n|\r)*$"
                })
            </dd>
        </dl>
        <div class="block block-vertical">
            <button type="submit" class="btn btn-action btn-large btn-next">内容の確認に進む</button>
            <a href="@PurchaseShippingUrl(payment.CartId)" class="btn btn-primary btn-text btn-prev">配送情報を変更する</a>
        </div>
    </form>
</main>

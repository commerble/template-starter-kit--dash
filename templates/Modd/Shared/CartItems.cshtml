@functions {
    public class LineViewModel {
        public int ProductId { get; set; }
        public string ExternalId1 { get; set; }
        public string Name { get; set; }
        public bool HasLimitPerAccount { get; set; }
        public bool Stockout { get; set; }
        public bool HasErrors { get; set; }
        public string Prefix { get; set; }
        public decimal UnitPriceWithoutTax { get; set; }
        public decimal UnitPriceWithTax { get; set; }
        public decimal LinePrice { get; set; }
        public decimal DiscountPrice { get; set; }
        public decimal UsagePoint { get; set; }
        public decimal ChargePoint { get; set; }
        public int Qty { get; set; }
        public string Kind { get; set; }
        public string ProductPageCode { get; set; }
        public string DisplayName { get; set; }
        public string Icon { get; set; }
        public string Size { get; set; }
        public string Color { get; set; }
        public object ToGtmItem() {
            return new  {
                item_name = Name,
                item_id = ExternalId1,
                item_category = Kind,
                price = UnitPriceWithoutTax.ToString("F0"),
                quantity = Qty,
            };
        }
    }

    List<LineViewModel> LoadViewModel(ShoppingCartBase cart) {
        var productIds = cart.ExpandItems.Select(item => item.ProductId).ToArray();
        var products = Database.Query(new { Now, Next }, (db, args)=> 
            from s in db.Products
            join d in db.ProductDetails on s.ExternalId1 equals d.ExternalId1
            join r in db.ProductRelations on s.ExternalId1 equals r.ProductExternalId1
            join p in db.ProductPages on r.ProductPageCode equals p.Code
            where productIds.Contains(s.Id)
            select new {
                ProductId = s.Id,
                p.Code,
                p.Kind,
                s.Name,
                d.DisplayName,
                d.Size,
                d.Color,
                PageIcon = p.Icon,
                ProductIcon = d.Icon
            }
        ).ToList();
        
        return cart.ExpandOrderItems
                    .Select(item => {
                        var sku = products.Where(p => p.ProductId == item.ProductId).FirstOrDefault();
                        return new LineViewModel {
                            ProductId = item.ProductId,
                            ExternalId1 = item.Product.ExternalId1,
                            Name = item.Product.Name,
                            HasLimitPerAccount = (Page.Template.GetProductSalesPattern(item.ProductId).MaxPurchasePerAccount ?? 0 ) > 0,
                            Stockout = cart.Errors.Any(err => err.Item?.ProductId == item.ProductId && err.ErrorType == ShoppingCartErrorType.StockOut),
                            HasErrors = cart.Errors.Any(err => err.Item?.ProductId == item.ProductId),
                            Prefix = $"Items[{cart.Items.IndexOf(item)}].",
                            UnitPriceWithoutTax = (item.LinePrice + item.DiscountPrice + item.PointUsage - item.Tax) / item.OrderAmount,
                            UnitPriceWithTax = (item.LinePrice + item.DiscountPrice + item.PointUsage) / item.OrderAmount,
                            LinePrice = item.LinePrice,
                            DiscountPrice = item.DiscountPrice,
                            UsagePoint = item.PointUsage,
                            ChargePoint = item.PointCharge,
                            Qty = item.OrderAmount,
                            Kind = sku?.Kind,
                            ProductPageCode = sku?.Code,
                            DisplayName = sku?.DisplayName,
                            Icon = !string.IsNullOrEmpty(sku?.ProductIcon) ? sku.ProductIcon : sku?.PageIcon,
                            Size = sku?.Size,
                            Color = sku?.Color,
                        };
                    }).ToList();
    }
}
@{
    var cart = Page.ViewData.Model as ShoppingCartBase;
    var action = Page.ViewData["action"] as bool? ?? true;
    var total = Page.ViewData["total"] as bool? ?? false;
    var vm = LoadViewModel(cart);
}

<table class="table">
    <thead>
        <tr>
            <th colspan="2">商品</th>
            <th>個数</th>
            <th>小計</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var line in vm ) {
            var gtmRemove = new {
                @event = "remove_from_cart",
                ecommerce = new {
                    items = new [] { line.ToGtmItem() }
                }
            };
            <tr>
                <td align="center">
                    <a href="@ItemUrl(line.ProductPageCode)" class="product-icon">
                        <div class="image image-square">
                            <img src="@IconUrl(line.Icon)" alt="@line.Name" loading="lazy" decoding="async">
                        </div>
                    </a>
                </td>
                <td align="center">
                    <dl>
                        <dt><a href="@ItemUrl(line.ProductPageCode)">@SkuName(line.Name, line.DisplayName, line.Color, line.Size)</a></dt>
                        <dd>
                            @PrintPrice(line.UnitPriceWithTax, del:line.DiscountPrice > 0)
                            @if (line.DiscountPrice > 0) {
                                <br> @PrintPrice(line.LinePrice / line.Qty)
                            }
                            @PrintPoint(line.ChargePoint / line.Qty) <br>
                            <a href="@CartOutUrl(line.ProductId)" class="btn btn-primary btn-text btn-small" data-gtm="@Jil.JSON.Serialize(gtmRemove)">カートから削除</a>
                        </dd>
                    </dl>
                </td>
                <td data-title="個数">
                    @if (action) {
                        if (line.Stockout) {
                            <span>在庫切れ</span>
                        } 
                        else {
                            <input name="@(line.Prefix)ProductId" value="@line.ProductId" type="hidden">
                            <select name="@(line.Prefix)RequestAmount" ic-action="showRecalc">
                                @for (var i = 1; i <= 10; i++ ) {
                                    <option value="@i" @when(i==line.Qty, "selected")>@i</option>
                                }
                            </select>
                        }
                    }
                    else {
                        <text>数量：@line.Qty</text>
                    }
                </td>
                <td data-title="小計">
                    @PrintPrice(line.LinePrice, attention: line.DiscountPrice > 0)
                    @PrintPoint(line.ChargePoint)
                    @if (line.DiscountPrice > 0) {
                        <br><span class="price">（<span class="price-value">&yen;@line.DiscountPrice.ToString("N0")</span>値引き）</span>
                    }
                </td>
            </tr>
        }
    </tbody>
    <tfooter>
        @if (total) {
            <tr>
                <th colspan="3">送料</th>
                <td align="center">@PrintPrice(cart.DeliveryCharge)</td>
            </tr>
            <tr>
                <th colspan="3">決済手数料</th>
                <td align="center">@PrintPrice(cart.CacheOnDeliveryCharge)</td>
            </tr>
        }
        <tr>
            <th colspan="3">合計</th>
            <td align="center">
                <span class="text-nowrap">
                    @if (total) {
                        @PrintPrice(cart.TotalPayment, attention: true, strong: true) <br>
                    }
                    else {
                        @:@PrintPrice(cart.Subtotal, attention: true, strong: true) + 送料<br>
                    }
                </span>
                @if (cart.ChargePointSummary.HasValue) {
                    <span class="price"><span class="price-value">@((total ? cart.ChargePointSummary.Value : vm.Sum(line => line.ChargePoint)).ToString("N0"))</span> ポイント付与</span>
                }
                @if (cart.DiscountPrice > 0) {
                    <br><span class="price">（<span class="price-value">&yen;@cart.DiscountPrice.ToString("N0")</span>値引き）</span>
                }
            </td>
        </tr>
        @Page.Html.Partial("ModdSharedApplyCampaigns", cart)
    </tfooter>
</table>

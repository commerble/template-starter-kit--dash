@using VM = Crosswarp.Modd.Controllers.ViewModels;
@using PointBank = Crosswarp.Modd.PointBank;
@using System.Text;
@using Commerble.Sandbox.CmsDb;

@{
    InitOnce();
}

@functions {
    void InitOnce () {
        if (ViewBag.InitOnce == null) {
            var isSystemRoute = ViewBag.RouteName == "ModdDefault" || ViewBag.RouteName == "ModdPurchase";
            if (isSystemRoute) {
                Page.Response.Headers.Add("X-Robots-Tag", "noindex");
            }
            else {
                Page.Response.Cache.SetExpires(Next);
                Page.Response.Cache.SetMaxAge(Next - DateTime.Now);
            }
            ViewBag.InitOnce = true;
        }
    }
    // -- プレビュー
    static string PREVIEW_KEY = "G2OJzTlzsfin8QGMOSjgbgYMEuS68GX8";
    bool? _isPreview = null;
    bool IsPreview { get { if (!_isPreview.HasValue) { _isPreview = Page.Request.Cookies.AllKeys.Contains(PREVIEW_KEY); } return _isPreview.Value; } }

    // -- プレビュー時間を加味した現在日時
    DateTime? _now = null;
    DateTime Now { get { if (!_now.HasValue) { _now = DateTime.TryParse(Page.Request.Cookies[PREVIEW_KEY]?.Value, out var datetime) ? datetime : TruncateDateTime(DateTime.Now, 300); } return _now.Value; } }

    // -- 次の5分刻みの時間、プレビュー時には1秒後
    DateTime? _next = null;
    DateTime Next { get { if (!_next.HasValue) { _next =  IsPreview ? DateTime.Now.AddSeconds(1) : TruncateDateTime(DateTime.Now, 300).AddSeconds(300); } return _next.Value; } }

    // -- 次の30分刻みの時間、プレビュー時には1秒後
    DateTime? _nextLong = null;
    DateTime NextLong { get { if (!_nextLong.HasValue) { _nextLong =  IsPreview ? DateTime.Now.AddSeconds(1) : TruncateDateTime(DateTime.Now, 1800).AddSeconds(1800); } return _nextLong.Value; } }

    // -- 次の1日刻みの時間、プレビュー時には1秒後
    DateTime? _nextLongLong = null;
    DateTime NextLongLong { get { if (!_nextLong.HasValue) { _nextLongLong =  IsPreview ? DateTime.Now.AddSeconds(1) : TruncateDateTime(DateTime.Now, 86400).AddSeconds(86400); } return _nextLongLong.Value; } }


    // -- 時刻を指定秒で丸める
    DateTime TruncateDateTime(DateTime datetime, int seconds) {
        return new DateTime((long) (Math.Truncate((double)datetime.Ticks / 10000000 / seconds)) * 10000000 * seconds);
    }

    // -- サイトコンフィグ全てをランタイムキャッシュで保持する。更新サイクルは1日（NextLongLong）
    Dictionary<string, string> _configs = null;
    Dictionary<string, string> Configs {
        get {
            if (_configs == null) {
                var cacheKey = globalCacheKey("SiteConfigs");
                _configs = Page.Template.Cache(cacheKey, NextLongLong, () => {
                    return Database.Query(new { Now, NextLongLong }, db => 
                        from c in db.SiteConfigs
                        select new {
                            c.ConfigKey,
                            c.ConfigValue
                        }).ToDictionary(c => c.ConfigKey, c => c.ConfigValue);
                });
            }
            return _configs;
        }
    }
    string GetConfigValue(string configKey, string defaultValue = null) => Configs.ContainsKey(configKey) ? Configs[configKey] ?? defaultValue : defaultValue;

    // -- サイトページのルーティング規則をランタイムキャッシュで保持する。更新サイクルは1日（NextLongLong）
    Dictionary<string, string> _sitePageKindRoutes = null;
    Dictionary<string, string> SitePageKindRoutes {
        get {
            if (_sitePageKindRoutes == null) {
                var cacheKey = globalCacheKey("SitePageKindRoutes");
                _sitePageKindRoutes = Page.Template.Cache(cacheKey, NextLongLong, () => {
                    return Database.Query(new { Now, NextLongLong }, db => 
                        from k in db.SitePageKinds
                        select new {
                            k.Code,
                            RouteName = k.Code
                        }).ToDictionary(c => c.Code, c => c.RouteName);
                });
            }
            return _sitePageKindRoutes;
        }
    }

    // -- URLヘルパー
    string ItemUrl(string code) {
        return Href($"~/{(code?.ToLower())}");
    }
    string EmbedUrl(string code) {
        return Page.Template.SecuredLink("ItemEmbed", new { Code = code }).Replace("http:","https:");
    }
    string KindUrl(string code, string sort = "new") {
        return Href($"~/{(code?.ToLower())}?sort={sort}");
    }
    string TagUrl(string code, string sort = "new") {
        return Href($"~/{(code?.ToLower())}");
    }
    string SearchUrl() {
        return Href($"~/search/");
    }
    string ImageUrl(string url, int w, int h, string noimg = "") {
        if (string.IsNullOrEmpty(url)) {
            url = noimg;
        }
        var sep = url.Contains("?") ? "&" : "?";
        return url + sep + $"_rc={Page.Template.RestartCounter}&width={w}&height={h}";
    }
    string ImageUrl(string url, string noimg = "") {
        if (string.IsNullOrEmpty(url)) {
            url = noimg;
        }
        var sep = url.Contains("?") ? "&" : "?";
        return url + sep + $"_rc={Page.Template.RestartCounter}";
    }
    string IconUrl(string url) {
        return ImageUrl(url, 270, 270, "https://fakeimg.pl/270x270/?text=NO%20IMG");
    }
    string ThumbnailUrl(string url) {
        return ImageUrl(url, 270, 270, "https://fakeimg.pl/270x270/?text=NO%20IMG");
    }
    string TopicThumbnailUrl(string url) {
        return ImageUrl(url, 270, 135, "https://fakeimg.pl/270x135/?text=NO%20IMG");
    }
    string LargeImageUrl(string url) {
        return ImageUrl(url, 640, 640, "https://fakeimg.pl/640x640/?text=NO%20IMG");
    }
    string SmallImageUrl(string url) {
        return ImageUrl(url, 64, 64, "https://fakeimg.pl/64x64/?text=NO%20IMG");
    }
    string PageUrl(string code) {
        return Href($"~/{code.ToLower()}");
    }
    string CallbacksGMOPGUrl() {
        return Page.Template.SecuredLink("CallbacksGMOPG", new {}).Replace("http://", "https://");
    }
    string CartUrl() {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Order", action = "Cart"});
    }
    string CartInUrl(int item, int? qty = null) {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Order", action = "Cart", item, qty});
    }
    string CartInUrl(int item, string desc, int? qty = null) {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Order", action = "Cart", item, desc, qty});    
    }
    string CartInUrl(int item, long reserve, int? qty = null) {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Order", action = "Cart", item, reserve, qty});    
    }
    string CartInUrl(int item, long reserve, string desc, int? qty = null) {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Order", action = "Cart", item, reserve, desc, qty});    
    }
    string CartOutUrl(int item) {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Order", action = "CartItemDelete", item});
    }
    string FavoriteUrl(int? id = null, int? item = null) {
        if (item != null) {
            return Page.Url.RouteUrl("ModdDefault", new {controller = "Member", action = "Favorites", item});
        }
        if (id != null) {
            return Page.Url.RouteUrl("ModdDefault", new {controller = "Member", action = "Favorites", id});
        }
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Member", action = "Favorites"});
    }
    string FavoriteCreateUrl(int item) {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Member", action = "CreateFavorite", item});
    }
    string ReserveUrl(long? id = null) {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Member", action = "Notices", id});
    }
    string ReserveCreateUrl(int item, int? requestAmount = null) {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Member", action = "CreateNotice", item, requestAmount});
    }
    string LoginUrl(string returnUrl = null) {
        return returnUrl == null ? Page.Template.GetLoginUrl() : Page.Url.RouteUrl("ModdDefault", new {controller = "Site", action = "Login", returnUrl});    
    }
    string LoginChallengeUrl() {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Site", action = "Login"});    
    }
    string LogoutUrl() {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Site", action = "Logout", returnUrl = Href("~/")});    
    }
    string NewGuestUrl(string returnUrl){
        return Page.Template.SecuredLink("ModdDefault", new { controller="Site", action="NewGuest", returnUrl });
    }
    string RegisterUrl(){
        return Page.Template.SecuredLink("ModdDefault", new { controller="Site", action="Account" });
    }
    string RecoveryUrl(string token = null) {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Site", action="Recovery", id=token});
    }
    string InquiryUrl(string id) {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Site", action="Inquiry", id});
    }
    string MyPageUrl() {
        return Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Index" });
    }
    string PointUrl() {
        return Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Point" });
    }
    string AccountUrl() {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Member", action="Account" });
    }
    string AccountAddressUrl() {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Member", action="AccountAddress" });
    }
    string AddressUrl(long? id = null) {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Member", action="Addresses", id });
    }
    string AddressCreateUrl() {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Member", action="CreateAddress" });
    }
    string UserNameChangeUrl() {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Member", action="Password" });
    }
    string PasswordChangeUrl() {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Member", action="Password" });
    }
    string QuitUrl() {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Member", action="Quit" });
    }
    string MemberZipSearch(long? id = null) {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Member", action="ZipSearch", id });
    }
    string ArchiveUrl(long? id = null) {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Order", action="Archives", id });
    }
    string HistoryUrl(long? id = null) {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Order", action="History", id });
    }
    string HistoryShippingUrl(long id) {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Order", action="HistoryShipping", id });
    }
    string HistoryZipSelect(long id) {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Order", action="ZipSelect", id });
    }
    string CancelUrl(long id) {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Order", action="HistoryCancel", id });
    }
    string GuestOrderUrl(string accessKey) {
        return Page.Template.SecuredLink("ModdDefault", new { controller="Site", action="GuestOrder", id=accessKey });
    }
    string PurchaseUrl(int cart, bool? direct = null) {
        return Page.Template.SecuredLink("ModdPurchase", new { cart, action="Index", direct });
    }
    string PurchaseShippingUrl(int cart) {
        return Page.Template.SecuredLink("ModdPurchase", new { cart, action="Shipping" });
    }
    string PurchaseZipSelect(int cart) {
        return Page.Template.SecuredLink("ModdPurchase", new { cart, action="ZipSelect" });
    }
    string PurchasePaymentUrl(int cart) {
        return Page.Template.SecuredLink("ModdPurchase", new { cart, action="Payment" });
    }
    string PurchaseExternalUrl(int cart, long id) {
        return Page.Template.SecuredLink("ModdPurchase", new { cart, action="External", id });
    }
    string PurchaseCompleteUrl(int cart, long id) {
        return Page.Template.SecuredLink("ModdPurchase", new { cart, action="Complete", id });
    }

    /// -- Helpers
    string when(bool condition, string then, string @else = "") => condition ? then : @else;
    string fallback(params string[] values) => values.FirstOrDefault(v => !string.IsNullOrWhiteSpace(v));
    string globalCacheKey(string name) => $"GlobalData:{name}:{Page.Template.RestartCounter}{(IsPreview ? TruncateDateTime(DateTime.Now, 1).Ticks.ToString() : string.Empty)}";
    Dictionary<PaymentMethod,string> PaymentMethodText = new Dictionary<PaymentMethod,string>{
        [PaymentMethod.CashOnDelivery] = "代引き",
        [PaymentMethod.Cvs]            = "コンビニ",
        [PaymentMethod.Offsite]        = "銀行振込",
        [PaymentMethod.Offline]        = "オフライン",
        [PaymentMethod.Token]          = "クレジットカード",
        [PaymentMethod.PointOnly]      = "全額ポイント",
        [PaymentMethod.External]       = "外部決済 （カード・コンビニ・キャリア）",
        [PaymentMethod.None]           = "決済方法なし",
    };
    Dictionary<HumanSexes, string> HumanSexesText = new Dictionary<HumanSexes, string> {
        [HumanSexes.NotKnown] = "未選択",
        [HumanSexes.Male]     = "男性",
        [HumanSexes.Female]   = "女性",
    };
    Dictionary<bool, string> SubscribeText = new Dictionary<bool, string> {
        [true]  = "希望する",
        [false] = "希望しない",
    };
    Dictionary<OrderStatus,string> OrderStatusText = new Dictionary<OrderStatus,string>{
        [OrderStatus.Accept]       = "注文完了",
        [OrderStatus.UnAllocate]   = "注文完了",
        [OrderStatus.PartAllocate] = "出荷準備中",
        [OrderStatus.Allocated]    = "出荷準備中",
        [OrderStatus.ShipIndicate] = "出荷準備中",
        [OrderStatus.Ship]         = "出荷完了",
        [OrderStatus.Arrival]      = "お届け完了",
        [OrderStatus.Booked]       = "お届け完了",
        [OrderStatus.Cancel]       = "キャンセル",
        [OrderStatus.ShipSuspend]  = "出荷準備中",
    };
    Dictionary<ReserveRequestStatus,string> ReserveRequestStatusText = new Dictionary<ReserveRequestStatus,string>{
        [ReserveRequestStatus.Accept]    = "未入荷",
        [ReserveRequestStatus.Allocated] = "入荷",
        [ReserveRequestStatus.Purchased] = "購入済",
        [ReserveRequestStatus.Cancel]    = "キャンセル",
    };
    List<(string Code, string Name, string Thumbnail, int DisplayOrder, bool IsListed)> _tags = null;
    List<(string Code, string Name, string Thumbnail, int DisplayOrder, bool IsListed)> Tags {
        get {
            if (_tags == null) {
                var cacheKey = globalCacheKey("Tags");
                _tags = Page.Template.Cache(cacheKey, Next, () => {
                    return Database.Query(new { Now, Next, IsPreview }, (db, args) => (
                        from p in db.SitePages
                        where p.Kind == "tag"
                          &&  p.DisplayStart <= Now 
                          && (p.DisplayEnd == null || p.DisplayEnd > Now)
                          && (p.IsPublished || IsPreview)
                        orderby p.DisplayOrder
                        select new {
                            p.Code,
                            p.Name,
                            p.Thumbnail,
                            p.DisplayOrder,
                            p.IsListed,
                        }
                    )).Select(k => (k.Code, k.Name, k.Thumbnail, k.DisplayOrder, k.IsListed)).ToList();
                });
            }
            return _tags;
        }
    }
    string SkuName(string name, string part1, string part2, string part3) {
        if (string.IsNullOrEmpty(part1)) {
            return name;
        }
        return $"{part1} {$"{part2}／{part3}".Trim(new[]{'／'})}".Trim();
    }
}

@helper RenderParts(string position) {
    var root = Href("~/");
    var cacheKey = globalCacheKey("SiteParts");
    var siteParts = Page.Template.Cache(cacheKey, NextLongLong, () => 
                        Database.Query(Now, db => db.SiteParts)
                        .Select(p => new KeyValuePair<Regex, SiteParts>(new Regex(("^" + root + p.Pattern + "$").Replace("//","/"), RegexOptions.IgnoreCase), p)));

    var path = Page.Request.Url.AbsolutePath;
    if (root.Equals(path + "/", StringComparison.OrdinalIgnoreCase)) {
        path = root;
    }
    
    var parts = siteParts.Where(kv => kv.Key.Match(path).Success && kv.Value.Position == position).OrderBy(kv => kv.Value.DisplayOrder).Select(kv => kv.Value.Html);

    @:@Raw(string.Join("\n", parts))
}

@helper RenderMeta() {
    var brand = GetConfigValue("BRAND_NAME"); 
    var defaultTitle = $"{ViewBag.RouteName} | {brand}";
    var defaultDescription = GetConfigValue("BRAND_DESCRIPTION");
    var defaultImage = GetConfigValue("BRAND_IMAGE_URL");
    var requestUrl = Page.Template.SecuredHost(true) + Page.Request.Path;

    var title = string.IsNullOrWhiteSpace(ViewBag.MetaTitle) ? defaultTitle : $"{ViewBag.MetaTitle} | {brand}";
    var description = fallback(ViewBag.MetaDescription, defaultDescription);
    var image = fallback(ViewBag.MetaImage, defaultImage);
    
    var ogType = fallback(ViewBag.OgType, "article");
    var ogTitle = fallback(ViewBag.OgTitle, title);
    var ogDescription = fallback(ViewBag.OgDescription, description);
    var ogImage = fallback(ViewBag.OgImage, image);
    var ogUrl = fallback(ViewBag.OgUrl, requestUrl);
    var canonical = fallback(ViewBag.Canonical, requestUrl);

    <title>@title</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta http-equiv="X-UA-Compatible" content="chrome=1; IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="format-detection" content="telephone=no">
    <meta name="x-root" content="@Href("~/")">
    <meta name="description" content="@description">
    <meta name="twitter:card" content="summary_large_image">
    <meta property="og:title" content="@ogTitle">
    <meta property="og:url" content="@ogUrl">
    <meta property="og:description" content="@ogDescription">
    <meta property="og:type" content="@ogType">
    <meta property="og:image" content="@ogImage">
    <link rel="canonical" href="@canonical">
}

@helper RenderJsonLD() {
    if (ViewBag.JsonLd != null) {
    <script type="application/ld+json">@Raw(Jil.JSON.SerializeDynamic(ViewBag.JsonLd))</script>
    }
}

@helper RenderDataLayer() {
    <script type="application/json" id="datalayer-initial">@Raw(Jil.JSON.SerializeDynamic(ViewBag.DataLayer))</script>
    <script>
        (function() {
            var data = JSON.parse(document.getElementById("datalayer-initial").innerHTML);
            window.dataLayer = window.dataLayer || [];
            if (!Array.isArray(data)) { data = [data]; }
            for (var i = 0; i < data.length; i++) { window.dataLayer.push(data[i]); }
        }())
    </script>
}

@helper RenderPreviewFooter() {
    if (IsPreview) {
        <a href="@Href("~/preview")" style="background: red; color: white; padding: 0 1rem; width: 100%; height: 48px; line-height: 48px; position: fixed; text-align: right; bottom:0; z-index:9999;">
            プレビュー中 &nbsp;&nbsp;&nbsp;&nbsp; プレビュー時間 @Now
        </a>
    }
}

@helper RenderHeader() {
    <header class="gheader content-wide">
        <h1 class="logo"><a href="@Href("~/")" class="image image-base"><img src="@GetConfigValue("BRAND_LOGO_URL")" alt="@GetConfigValue("BRAND_NAME")" width="140" height="22" crossorigin="anonymous"></a></h1>
        <a href="@FavoriteUrl()" title="お気に入り" class="gheader-link"><i class="icon-dash-heart"></i><span class="sp-hide">お気に入り</span></a>
        <a href="@MyPageUrl()" title="マイページ" class="gheader-link"><i class="icon-dash-user"></i><span class="sp-hide">マイページ</span></a>
        <a href="@CartUrl()" title="カート" class="gheader-link"><i class="icon-dash-cart"></i><span class="sp-hide">カート</span></a>
    </header>
}

@helper RenderGlobalNav() {
    var cacheKey = globalCacheKey("GlobalNav");
    var groupedKinds = 
        Page.Template.Cache(cacheKey, NextLongLong, () => {
            var codes = GetConfigValue("GNAV_KIND_GROUPS", string.Empty).Split(',').Select(text => text.Trim()).ToArray();
            var groups = 
                Database.Query(new { Now, Next, IsPreview }, (db, args) => 
                    from p in db.SitePages
                    where codes.Contains(p.Code)
                    select new {
                        p.Code,
                        p.Name,
                    }
                );
            groups = groups.OrderBy(group => Array.IndexOf(codes, group.Code));
            return groups.Select(group => new {
                Name = group.Name,
                Children = Database.Query(new { Now, Next, IsPreview, group.Code }, (db, args) =>
                    from p in db.SitePages
                    where p.Code != args.Code && p.Code.StartsWith(args.Code)
                      && (p.IsPublished == true || args.IsPreview)
                    select new {
                        p.Code,
                        p.Thumbnail,
                        p.DisplayOrder,
                        p.Name,
                        p.Title,
                    }
                )
            });
        });
    <nav class="gnav">
        <ul>
            @foreach(var group in groupedKinds) {
                <li>
                    <button>
                        @group.Name
                        <ul>
                            @foreach(var kind in group.Children.OrderBy(k => k.DisplayOrder)) {
                                <li>
                                    <a href="@KindUrl(kind.Code)" rel="bookmark" title="@kind.Name" class="gnav-link">
                                        @if (!string.IsNullOrEmpty(kind.Thumbnail)) {
                                            <div class="gnav-link-icon">
                                                @if (kind.Thumbnail.StartsWith("https://")) {
                                                    <div class="image image-square"><img src="@kind.Thumbnail"></div>
                                                } else {
                                                    <i class="@kind.Thumbnail"></i>
                                                }
                                            </div>
                                        }
                                        <div class="gnav-link-text">@kind.Name</div>
                                    </a>
                                </li>
                            }
                        </ul>
                    </button>
                </li>
            }
        </ul>
    </nav>
}

@helper RenderHeaderBanner() {
    var cacheKey = globalCacheKey("HeaderBanner");
    var banner = 
        Page.Template.Cache(cacheKey, Next, () =>
            Database.Single(new { Now, Next, IsPreview }, (db, args) => (
                from b in db.Banners
                where b.Kind == "Header" 
                &&  b.DisplayStart <= args.Now
                && (b.DisplayEnd == null || b.DisplayEnd > args.Now)
                && (b.IsPublished == true || args.IsPreview)
                orderby b.DisplayStart descending, b.DisplayOrder
                select new {
                    b.Title,
                    b.LinkText,
                    b.LinkUrl,
                }
            ).FirstOrDefault()));

    if (banner != null) {
        <aside class="announce">
            <div class="content-wide">
                <p>
                    @if (string.IsNullOrEmpty(banner.LinkUrl)) {
                        @Raw(banner.Title ?? string.Empty)
                    }
                    else if (string.IsNullOrEmpty(banner.LinkText)) {
                        <a href="@Href(banner.LinkUrl)">
                            @Raw(banner.Title ?? string.Empty)
                        </a>
                    }
                    else {
                        @Raw(banner.Title ?? string.Empty) <a href="@Href(banner.LinkUrl)">@banner.LinkText</a>
                    }
                </p>
            </div>
        </aside>
    }
}

@helper RenderFooter() {
    <footer class="gfooter">
        @RenderParts("Footer")
        <p class="text-center text-small">@GetConfigValue("BRAND_COPY_RIGHT")</p>
    </footer>
}

@helper FormatPrice(decimal? price) {
    if (price.HasValue) {
        <text>&yen;@price.Value.ToString("N0")</text>
    }
    else {
        <text>価格未決定</text>
    }
}

@helper FormatPoint(decimal? point) {
    if (point.HasValue) {
        <text>@point.Value.ToString("N0")</text>
    }
}

@helper PrintPrice(decimal? price, bool? hasMultiplePrice = false, bool del = false, bool attention = false, bool strong = false) {
    if (price.HasValue) {
        <span class="price @when(del,"text-del") @when(attention,"price-attention")  @when(strong,"price-strong")"><span class="price-value">&yen;@price.Value.ToString("N0")</span>@when(hasMultiplePrice == true, "～")<span class="price-tax">(税込)</span></span>
    } else {
        <span class="price">価格未決定</span>
    }
}

@helper PrintPoint(decimal? point, bool? hasMultiplePrice = false) {
    if (point.HasValue) {
        <span class="price"><span class="price-value">@point.Value.ToString("N0")</span>@when(hasMultiplePrice == true, "～") pt</span>
    }
}

@helper PrintDate(DateTime date) {
    var dayOfWeek = date.ToString("dddd", new System.Globalization.CultureInfo("ja-JP"));
    <text>@($"{date:yyyy年MM月dd日}({dayOfWeek})")</text>
}

@helper PrintTitleOrName(string title, string name) {
    if (!string.IsNullOrEmpty(title)) {
        <text>@Raw(title)</text>
    } else {
        <text>@name</text>
    }
}

@helper ValidationMessageFor(string name) {
    <p class="field-error" data-valmsg-for="@name" data-valmsg-replace="true"></p>
}

@helper ProductTile(string code, string name, string thumbnail, decimal? unitPriceWithTax, bool? hasMultiplePrice, object gtm) {
    <article class="tile">
        <a href="@ItemUrl(code)" rel="bookmark" title="@name" data-gtm="@Jil.JSON.Serialize(gtm)">
            <h1>@name</h1>
            <figure class="image image-square">
                <img src="@ThumbnailUrl(thumbnail)" alt="@name" loading="lazy" decoding="async">
            </figure>
            <div class="tile-info text-right">
                @PrintPrice(unitPriceWithTax, hasMultiplePrice)
            </div>
        </a>
    </article>
}

@helper TopicTile(string code, string name, string thumbnail, DateTime? publishDate) {
    <article class="tile">
        <a href="@PageUrl(code)" rel="bookmark" title="@name">
            <h1>@name</h1>
            @if (publishDate.HasValue) {
                <time datetime="@publishDate.Value.ToString("o")">@publishDate.Value.ToString("yyyy.MM.dd")</time>
            } else {
                <time></time>
            }
            <figure class="image image-2x1">
                <img src="@TopicThumbnailUrl(thumbnail)" alt="@name" loading="lazy" decoding="async">
            </figure>
        </a>
    </article>
}

@helper TileList(IEnumerable<dynamic> items, Func<dynamic, int, RazorEngine.Templating.TemplateWriter> slot, int columns = 4, string klass = null, string id = null) {
    if (columns < 2 || columns > 5) { throw new ArgumentException("columns"); }
    <div class="tiles @($"tiles-x{columns}") @klass">
        @foreach(var (item, index) in items.Select((item, index) => (item, index))) {
            @:@slot(item, index)
        }
    </div>
}

@helper DisplayViewMessages(ViewMessages viewData){
      if (viewData != null && (viewData.Errors.Count + viewData.Warnings.Count + viewData.Messages.Count > 0) ) {
          var messageError = new Dictionary<string,string>{};
    
        // 下記はエラー表示を無視する設定をしている。カートも同時に修正する場合もあるので注意！
        var exceptErrors = new List<string>{
            "DeliveryDateError",
            "ItemNotFound",
            "SalesDateOutOfRangeBefore",
        };
        var errors = viewData.Errors.Distinct().Where(m => !exceptErrors.Any(e=>m.StartsWith(e)));

        if (errors.Any()) {
            <div class="alert alert-error">
                @foreach(var msg in errors ) {
                    var msgParts = msg.Split('\t').Concat(new []{"",""}).ToArray();
                    var msgKey = msgParts[0].Trim();
                    var msgFormat = messageError.ContainsKey(msgKey) ? messageError[msgKey] : msg;
                    var errorMessage = string.Format(msgFormat, msgParts[1], msgParts[2]);

                    <p>@errorMessage</p>
                }
            </div>
        }

        if (viewData.Warnings.Any()) {
            <div class="alert alert-warning">
                @foreach( var msg in viewData.Warnings ) {
                    <p class="warningOnSubmitText">@(messageError.ContainsKey(msg.Trim()) ? messageError[msg.Trim()] : msg)</p>
                }
            </div>
        }

        if (viewData.Messages.Any()) {
            <div class="alert alert-success">
                @foreach(var msg in viewData.Messages ){
                    <p class="successOnSubmitText">@(messageError.ContainsKey(msg.Trim()) ? messageError[msg.Trim()] : msg)</p>
                }
            </div>
        }

        if (viewData == null){
            @:@(Page.Html.ValidationSummary()))
        }
      }
}

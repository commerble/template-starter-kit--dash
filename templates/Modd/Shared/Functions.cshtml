@using VM = Crosswarp.Modd.Controllers.ViewModels;
@using PointBank = Crosswarp.Modd.PointBank;
@using System.Text;
@using Commerble.Sandbox.CmsDb;
@{
    if (ViewBag.RouteName != "ModdDefault" && ViewBag.RouteName != "ModdPurchase") {
        Page.Response.Cache.SetExpires(Next);
    }
}
@functions {
  
    bool HasViewMessages(ViewMessages viewData){
        return (viewData != null && (viewData.Errors.Count + viewData.Warnings.Count + viewData.Messages.Count > 0) );
    }

    bool IsIntercooler { get { return Page.Request.Headers.AllKeys.Any(key => key.ToLower() == "x-ic-request"); } }

    static string PREVIEW_KEY = "G2OJzTlzsfin8QGMOSjgbgYMEuS68GX8";
    bool? _isPreview = null;
    bool IsPreview { get { if (!_isPreview.HasValue) { _isPreview = Page.Request.Cookies.AllKeys.Contains(PREVIEW_KEY); } return _isPreview.Value; } }

    DateTime? _now = null;
    DateTime Now { get { if (!_now.HasValue) { _now = DateTime.TryParse(Page.Request.Cookies[PREVIEW_KEY]?.Value, out var datetime) ? datetime : TruncateDateTime(DateTime.Now, 300); } return _now.Value; } }

    DateTime? _next = null;
    DateTime Next { get { if (!_next.HasValue) { _next =  IsPreview ? DateTime.Now.AddSeconds(1) : TruncateDateTime(DateTime.Now, 300).AddSeconds(300); } return _next.Value; } }

    DateTime? _nextLong = null;
    DateTime NextLong { get { if (!_nextLong.HasValue) { _nextLong =  IsPreview ? DateTime.Now.AddSeconds(1) : TruncateDateTime(DateTime.Now, 1800).AddSeconds(1800); } return _nextLong.Value; } }

    DateTime? _nextLongLong = null;
    DateTime NextLongLong { get { if (!_nextLong.HasValue) { _nextLongLong =  IsPreview ? DateTime.Now.AddSeconds(1) : TruncateDateTime(DateTime.Now, 86400).AddSeconds(86400); } return _nextLongLong.Value; } }

    DateTime TruncateDateTime(DateTime datetime, int seconds) {
        return new DateTime((long) (Math.Truncate((double)datetime.Ticks / 10000000 / seconds)) * 10000000 * seconds);
    }

    /// Configs
    Dictionary<string, string> _configs = null;
    Dictionary<string, string> Configs {
        get {
            if (_configs == null) {
                var cacheKey = globalCacheKey("SiteConfigs");
                _configs = Page.Template.Cache(cacheKey, NextLongLong, () => {
                    return Database.Query(new { Now, NextLongLong }, db => 
                        from c in db.SiteConfigs
                        select new {
                            c.ConfigKey,
                            c.ConfigValue
                        }).ToDictionary(c => c.ConfigKey, c => c.ConfigValue);
                });
            }
            return _configs;
        }
    }
    string GetConfigValue(string configKey) => Configs.ContainsKey(configKey) ? Configs[configKey] : null;

    Dictionary<string, string> _sitePageKindRoutes = null;
    Dictionary<string, string> SitePageKindRoutes {
        get {
            if (_sitePageKindRoutes == null) {
                var cacheKey = globalCacheKey("SitePageKindRoutes");
                _sitePageKindRoutes = Page.Template.Cache(cacheKey, NextLongLong, () => {
                    return Database.Query(new { Now, NextLongLong }, db => 
                        from k in db.SitePageKinds
                        select new {
                            k.Code,
                            k.RouteName
                        }).ToDictionary(c => c.Code, c => c.RouteName);
                });
            }
            return _sitePageKindRoutes;
        }
    }

    /// URL factories
    string FavoriteUrl(int item) {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Member", action = "CreateFavorite", item});
    }
    string CartInUrl(int item, int? qty = null) {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Order", action = "Cart", item, qty});
    }
    string CartInUrl(int item, string desc, int? qty = null) {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Order", action = "Cart", item, desc, qty});    
    }
    string CartInUrl(int item, long reserve, int? qty = null) {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Order", action = "Cart", item, reserve, qty});    
    }
    string CartInUrl(int item, long reserve, string desc, int? qty = null) {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Order", action = "Cart", item, reserve, desc, qty});    
    }
    string CartOutUrl(int item) {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Order", action = "CartItemDelete", item});
    }
    string ReserveUrl(int item, int? requestAmount = null) {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Member", action = "CreateNotice", item, requestAmount});
    }
    string LoginUrl(string returnUrl = null) {
        return returnUrl == null ? Page.Template.GetLoginUrl() : Page.Url.RouteUrl("ModdDefault", new {controller = "Site", action = "Login", returnUrl});    
    }
    string LogoutUrl() {
        return Page.Url.RouteUrl("ModdDefault", new {controller = "Site", action = "Logout", returnUrl = Href("~/")});    
    }
    string ItemUrl(string code) {
        return Href($"~/item/{(code?.ToLower())}");
    }
    string CategoryUrl(string code, string sort = "new") {
        return Href($"~/category/{(code?.ToLower())}?sort={sort}");
    }
    string TagUrl(string code, string sort = "new") {
        return Href($"~/tag/{(code?.ToLower())}?sort={sort}");
    }
    string ImageUrl(string url, string noimg = "") {
        if (string.IsNullOrEmpty(url)) {
            url = noimg;
        }
        var sep = url.Contains("?") ? "&" : "?";
        return url + sep + $"_rc={Page.Template.RestartCounter}";
    }
    string IconUrl(string url) {
        return ImageUrl(url, "https://via.placeholder.com/270x270?text=NO%20IMG");
    }
    string ThumbnailUrl(string url) {
        return ImageUrl(url, "https://via.placeholder.com/270x270?text=NO%20IMG");
    }
    string LargeImageUrl(string url) {
        return ImageUrl(url, "https://via.placeholder.com/640x640?text=NO%20IMG");
    }
    string SmallImageUrl(string url) {
        return ImageUrl(url, "https://via.placeholder.com/64x64?text=NO%20IMG");
    }
    string PageUrl(string code, string kind) {
        return Page.Url.RouteUrl(SitePageKindRoutes[kind], new { Code = code?.ToLower() });
    }

    /// Helpers
    string when(bool condition, string then, string @else = "") => condition ? then : @else;
    string globalCacheKey(string name) => $"GlobalData:{name}:{Page.Template.RestartCounter}{(IsPreview ? TruncateDateTime(DateTime.Now, 1).Ticks.ToString() : string.Empty)}";
    Dictionary<PaymentMethod,string> PaymentMethodText = new Dictionary<PaymentMethod,string>{
        { PaymentMethod.CashOnDelivery, "代引き" },
        { PaymentMethod.Cvs, "コンビニ" },
        { PaymentMethod.Offsite, "銀行振込" },
        { PaymentMethod.Offline, "オフライン" },
        { PaymentMethod.Token, "クレジットカード" },
        { PaymentMethod.PointOnly, "全額ポイント" },
        { PaymentMethod.External, "外部決済（カード・コンビニ・キャリア）" },
        { PaymentMethod.None, "決済方法なし"},
    };
    Dictionary<HumanSexes, string> HumanSexesText = new Dictionary<HumanSexes, string> {
        [HumanSexes.NotKnown] = "未選択",
        [HumanSexes.Male] = "男性",
        [HumanSexes.Female] = "女性",
    };
    Dictionary<bool, string> SubscribeText = new Dictionary<bool, string> {
        [true] = "希望する",
        [false] = "希望しない"
    };
    Dictionary<OrderStatus,string> OrderStatusText = new Dictionary<OrderStatus,string>{
        {OrderStatus.Accept,       "注文完了"},
        {OrderStatus.UnAllocate,   "注文完了"},
        {OrderStatus.PartAllocate, "出荷準備中"},
        {OrderStatus.Allocated,    "出荷準備中"},
        {OrderStatus.ShipIndicate, "出荷準備中"},
        {OrderStatus.Ship,         "出荷完了"},
        {OrderStatus.Arrival,      "お届け完了"},
        {OrderStatus.Booked,       "お届け完了"},
        {OrderStatus.Cancel,       "キャンセル"},
        {OrderStatus.ShipSuspend,  "出荷準備中"}
    };
    Dictionary<ReserveRequestStatus,string> ReserveRequestStatusText = new Dictionary<ReserveRequestStatus,string>{
        {ReserveRequestStatus.Accept, "未入荷"},
        {ReserveRequestStatus.Allocated, "入荷"},
        {ReserveRequestStatus.Purchased, "購入済"},
        {ReserveRequestStatus.Cancel, "キャンセル"}
    };

    List<(string GroupCode, string Code, string Name, string Icon)> _kinds = null;
    List<(string GroupCode, string Code, string Name, string Icon)> Kinds {
        get {
            if (_kinds == null) {
                var cacheKey = globalCacheKey("Kinds");
                _kinds = Page.Template.Cache(cacheKey, Next, () => {
                    return Database.Query(new { Now, Next, IsPreview }, (db, args) => (
                        from k in db.ProductKinds
                        where k.IsPublished || args.IsPreview
                        orderby k.DisplayOrder
                        select new {
                            GroupCode = k.GroupCode,
                            Code = k.Code,
                            Name = string.IsNullOrEmpty(k.DisplayName) ? k.Name : k.DisplayName,
                            Icon = k.Icon
                        }
                    )).Select(k => (k.GroupCode, k.Code, k.Name, k.Icon)).ToList();
                });
            }
            return _kinds;
        }
    }

    List<(string GroupCode, string Code, string Name, string Icon)> _tags = null;
    List<(string GroupCode, string Code, string Name, string Icon)> Tags {
        get {
            if (_tags == null) {
                var cacheKey = globalCacheKey("Tags");
                _tags = Page.Template.Cache(cacheKey, Next, () => {
                    return Database.Query(new { Now, Next, IsPreview }, (db, args) => (
                        from t in db.ProductTags
                        where (t.IsPublished || args.IsPreview) && t.IsSearchable
                        orderby t.DisplayOrder
                        select new {
                            GroupCode = t.GroupCode,
                            Code = t.Code,
                            Name = string.IsNullOrEmpty(t.DisplayName) ? t.Name : t.DisplayName,
                            Icon = t.Icon
                        }
                    )).Select(k => (k.GroupCode, k.Code, k.Name, k.Icon)).ToList();
                });
            }
            return _tags;
        }
    }
}

@helper RenderPreviewFooter() {
    if (IsPreview) {
        <a href="@Href("~/preview")" style="background: red; color: white; padding: 0 1rem; width: 100%; height: 48px; line-height: 48px; position: fixed; text-align: right; bottom:0; z-index:9999;">
            プレビュー中 &nbsp;&nbsp;&nbsp;&nbsp; プレビュー時間 @Now
        </a>
    }
}

@helper RenderParts(string position) {
    var root = Href("~/");
    var cacheKey = globalCacheKey("SiteParts");
    var siteParts = Page.Template.Cache(cacheKey, NextLongLong, () => 
                        Database.Query(Now, db => db.SiteParts)
                        .Select(p => new KeyValuePair<Regex, SiteParts>(new Regex(("^" + root + p.Pattern + "$").Replace("//","/"), RegexOptions.IgnoreCase), p)));

    var path = Page.Request.Url.AbsolutePath;
    if ((path + "/") == root) {
        path = root;
    }
    
    var parts = siteParts.Where(kv => kv.Key.Match(path).Success && kv.Value.Position == position).OrderBy(kv => kv.Value.DisplayOrder).Select(kv => kv.Value.Html);

    @:@Raw(string.Join("\n", parts))
}

@helper RenderHeaderBanner() {
    var cacheKey = globalCacheKey("HeaderBanner");
    var banner = 
        Page.Template.Cache(cacheKey, Next, () =>
            Database.Single(new { Now, Next, IsPreview }, (db, args) => (
                from b in db.Banners
                where b.Kind == "Header" 
                &&  b.DisplayStart <= args.Now
                && (b.DisplayEnd == null || b.DisplayEnd > args.Now)
                && (b.IsPublished == true || args.IsPreview)
                orderby b.DisplayStart descending, b.DisplayOrder
                select new {
                    b.Title,
                    b.Subtitle,
                    b.LinkText,
                    b.LinkUrl,
                }
            ).FirstOrDefault()));

    if (banner != null) {
        <div class="announce">
            <div class="inner">
                <p>
                    <a href="@(string.IsNullOrEmpty(banner.LinkUrl) ? "#" : Href(banner.LinkUrl))")">
                        @Raw(banner.Title ?? string.Empty)
                    </a>
                </p>
            </div>
        </div>
    }
}

@helper RenderGlobalNav() {
    var cacheKey = globalCacheKey("GlobalNav");
    var groups = GetConfigValue("GNAV_KIND_GROUPS").Split(',').Select(text => text.Trim()).ToArray();
    var groupedKinds = 
        Page.Template.Cache(cacheKey, Next, () =>
            Database.Query(new { Now, Next, IsPreview }, (db, args) => 
                from k in db.ProductKinds
                where groups.Contains(k.GroupCode)
                  && (k.IsPublished == true || args.IsPreview)
                select new { 
                    k.GroupCode,
                    k.Code,
                    k.Icon,
                    k.DisplayOrder,
                    Name = string.IsNullOrEmpty(k.DisplayName) ? k.Name : k.DisplayName
                }
            ).GroupBy(k => k.GroupCode));
    <nav class="gnav">
        <div class="tabNavigation">
            <ul class="tabList">
                @foreach(var kinds in groupedKinds) {
                    <li class="tabListItem jp">
                        <a href="#" ic-action="toggleTab:'#@(kinds.Key)-tab'">@kinds.Key</a>
                    </li>
                }
            </ul>
            @foreach(var kinds in groupedKinds) {
                <div class="tabBody" id="@(kinds.Key)-tab">
                    <ul class="gnavList">
                        @foreach(var kind in kinds.OrderBy(k => k.DisplayOrder)) {
                            <li class="gnavListItem">
                                <a href="@CategoryUrl(kind.Code)" title="@kind.Name">@if (!string.IsNullOrEmpty(kind.Icon)) { <i class="@kind.Icon"></i> }@kind.Name</a>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    </nav>
}

@helper RenderHeader() {
    <header>
        <div class="inner">
            <p class="logo">
                <a href="@Href("~/")">
                    <img src="@GetConfigValue("BRAND_LOGO_URL")" alt="@GetConfigValue("BRAND_NAME")">
                </a>
            </p>
            <div class="headerLinkItem">
                <a href="@Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Favorites", id=(int?)null })">
                    <span class="headerLinkItemText"><i class="fa fa-heart"></i><span class="showOnPCInline">&nbsp;お気に入り</span></span>
                </a>
            </div>
            <div class="headerLinkItem">
                <a href="@Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Index" })">
                    <span class="headerLinkItemText"><i class="fa fa-user"></i><span class="showOnPCInline">&nbsp;マイページ</span></span>
                </a>
            </div>
            <div class="headerLinkItem">
                <a href="@Page.Url.RouteUrl("ModdDefault", new { controller="Order", action="Cart" })">
                    <span class="headerLinkItemText"><i class="fa fa-shopping-cart"></i><span class="showOnPCInline">&nbsp;カート</span></span>
                </a>
            </div>
        </div>
    </header>
}

@helper RenderFooter() {
    <footer>
        @RenderParts("Footer")
        <div class="footerBottomSection">
            <p class="copyright">@GetConfigValue("BRAND_COPY_RIGHT")</p>
        </div>
    </footer>
}

@helper RenderJsonLD() {
    if (ViewBag.JsonLd != null) {
    <script type="application/ld+json">@Raw(Jil.JSON.SerializeDynamic(ViewBag.JsonLd))</script>
    }
}

@helper RenderDataLayer() {
    <script>
        (function() {
            var data = @Raw(Jil.JSON.SerializeDynamic(ViewBag.DataLayer));
            window.dataLayer = window.dataLayer || [];
            if (!Array.isArray(data)) { data = [data]; }
            for (var i = 0; i < data.length; i++) { window.dataLayer.push(data[i]); }
        }())
    </script>
}

@helper DisplayPager(int currentPage,int itemCount,int itemPerPage){

    int itemCountFrom, itemCountTo;
    IEnumerable<int> listNum;
    int pageCount;
    bool pageFirst, pageLast;
    
    
    pageCount = itemCount / itemPerPage + ((itemCount % itemPerPage == 0) ? 0 : 1);
    itemCountFrom = currentPage* itemPerPage +1 ;
    itemCountTo = ((currentPage+1) == pageCount) ? itemCount : (currentPage+1) * itemPerPage;
    
    pageFirst = (currentPage== 0) ? true : false;
    pageLast = pageCount == 0 ? true : ( ((currentPage+1) == pageCount) ? true : false);
    
    listNum = Enumerable.Range(0,pageCount);

    <div class="paging">
        @if (pageFirst) { <a class="prev disabled"><span class="text">前</span></a> } else { <a class="prev" href="?page=@(currentPage-1)"><span class="text">前</span></a> }
        <span class="current">@(currentPage+1) / @pageCount</span>
        @if (pageLast) { <a class="next disabled"><span class="text">次</span></a> } else { <a class="next" href="?page=@(currentPage+1)"><span class="text">次</span></a> }
    </div>
}

@helper FormatPrice(decimal? price) {
    if (price.HasValue) {
        <text>&yen;@price.Value.ToString("N0")</text>
    }
    else {
        <text>価格未決定</text>
    }
}

@helper FormatPoint(decimal? point) {
    if (point.HasValue) {
        <text>@point.Value.ToString("N0")</text>
    }
}

@helper PrintPrice(decimal? price, string label = null, bool? hasMultiplePrice = false) {
    <p class="salePrice">
    @if (price.HasValue) {
        <text>@label<span class="num">&yen;@price.Value.ToString("N0")</span><span class="tax">（税込）</span></text>
    }
    else {
        <text>価格未決定</text>
    }
    </p>
}
@helper PrintNormalPrice(decimal? price, bool? hasMultiplePrice = false) {
    <p class="normalPrice">
        @if (price.HasValue) {
            <text>&yen;@price.Value.ToString("N0")</text>
            if (hasMultiplePrice == true) {
                <text>～</text>
            }
            <span class="tax">（税込）</span>
        }
        else {
            <text>価格未決定</text>
        }
    </p>
}

@helper PrintPoint(decimal? point, string label = null, string klass="getPoint", bool? hasMultiplePrice = false) {
    if (point.HasValue) {
        <p class="@klass">
            @label<span class="num">@point.Value.ToString("N0")</span>&nbsp;pt 
            @if (hasMultiplePrice == true) {
                <text>～</text>
            }
        </p>
    }
}

@helper PrintDate(DateTime date) {
    var dayOfWeek = date.ToString("dddd", new System.Globalization.CultureInfo("ja-JP"));
    <text>@($"{date:yyyy年MM月dd日}({dayOfWeek})")</text>
}

@helper ValidationMessageFor(string name) {
    <p class="inputError" data-valmsg-for="@name" data-valmsg-replace="true" style="display:none;"></p>
}

@helper ProductTile(string code, string name, string kindName, string kindIcon, string thumbnail, decimal? unitPriceWithTax, bool? hasMultiplePrice, object gtm) {
    <li class="productTile">
        <a href="@ItemUrl(code)" title="@name" data-gtm="@Jil.JSON.Serialize(gtm)">
            <div class="productTileImage">
                <img src="@ThumbnailUrl(thumbnail)" alt="@name">
                @if (!string.IsNullOrEmpty(kindIcon)) {
                    <i class="@kindIcon"></i>
                }
            </div>
            <div class="productTileText">
                <p class="productName" style="height: 21.6px;">@name</p>
                <p class="productCategory">@kindName</p>
                <div class="price">
                    @PrintNormalPrice(unitPriceWithTax, hasMultiplePrice)
                </div>
            </div>
        </a>
    </li>
}

@helper TopicTile(string code, string kind, string name, string thumbnail, DateTime? publishDate) {
    <li class="topicTile">
        <a href="@PageUrl(code, kind)">
            <div class="topicTileImage">
                <img src="@ThumbnailUrl(thumbnail)" loading="lazy">
            </div>
            <div class="topicTileText">
                @if (publishDate.HasValue) {
                    <time datetime="@publishDate.Value.ToString("o")">@publishDate.Value.ToString("yyyy-MM-dd")</time>
                } else {
                    <time></time>
                }
                <h2 class="title">@name</h2>
            </div>
        </a>
    </li>
}

@helper ProductTileList(IEnumerable<dynamic> items, Func<dynamic, int, RazorEngine.Templating.TemplateWriter> slot, string klass = "grid-pc-x4 grid-tb-x2 grid-sp-x2", string id = null) {
    <ul @when(id != null, $"id={id}") class="productTileList grid @klass">
        @foreach(var (item, index) in items.Select((item, index) => (item, index))) {
            @:@slot(item, index)
        }
    </ul>
}

@helper TopicTileList(IEnumerable<dynamic> items, Func<dynamic, int, RazorEngine.Templating.TemplateWriter> slot, string klass = "grid-pc-x3 grid-tb-x2 grid-sp-x1", string id = null) {
    <ul @when(id != null, $"id={id}") class="topicTileList grid @klass">
        @foreach(var (item, index) in items.Select((item, index) => (item, index))) {
            @:@slot(item, index)
        }
    </ul>
}

@helper SectionBlock(string title, Func<RazorEngine.Templating.TemplateWriter> slot) {
    <section class="section">
        <div class="inner">
            <h2 class="sectionTitle bordered">@title</h2>
            @slot()
        </div>
    </section>
}

@helper Concat(params Func<RazorEngine.Templating.TemplateWriter>[] slots) {
    foreach(var slot in slots) {
        @:@slot()
    }
}

@helper ButtonBlock(
    string text, 
    string href = null, 
    string name = null,
    string value = null,
    string icon = null,
    bool submit = false,
    bool btNext = false, 
    bool btPrev = false, 
    bool btAccent = false, 
    bool btPrimary = false,
    bool btCallToAction = false,
    bool btNormalSize = false,
    bool btLargeSize = false,
    bool showOnTB = false,
    IDictionary<string, string> attr = null) {
    var klass = string.Join(" ", (new []{
        btNext ? "btNext" : null,
        btPrev ? "btPrev" : null,
        btAccent ? "btAccent" : null,
        btPrimary ? "btPrimary" : null,
        btCallToAction ? "btCallToAction" : null,
        btNormalSize ? "btNormalSize" : null,
        btLargeSize ? "btLargeSize" : null,
    }).Where(k => k != null));
    var attrText = string.Join(" ", attr?.Select(kv => kv.Key + "=" + kv.Value) ?? new string[0]);
    <div class="buttonContainer @when(showOnTB, "showOnTB")">
        @if (string.IsNullOrEmpty(href)) {
            <button 
                type="@(submit?"submit":"button")"
                @when(!string.IsNullOrEmpty(name), $"name={name} value={(value??name)}") class="@klass" @attrText>
                @if(!string.IsNullOrEmpty(icon)) {
                    <i class="@icon"></i>
                }
                @text
            </button>
        }
        else {
            <a @when(!string.IsNullOrEmpty(href), $"href={href}") class="@klass" @attrText>
                @if(!string.IsNullOrEmpty(icon)) {
                    <i class="@icon"></i>
                }
                @text
            </a>
        }
    </div>
}

@helper LinkAnnex(string text, string href) {
    <p class="linkAnnex"><a href="@href">@text</a></p>
}

@helper DisplayViewMessages(ViewMessages viewData){
      if (viewData != null && (viewData.Errors.Count + viewData.Warnings.Count + viewData.Messages.Count > 0) ) {
          var messageError = new Dictionary<string,string>{};
    
        // 下記はエラー表示を無視する設定をしている。カートも同時に修正する場合もあるので注意！
        var exceptErrors = new List<string>{
            "DeliveryDateError",
            "ItemNotFound",
            "SalesDateOutOfRangeBefore",
        };
        var errors = viewData.Errors.Distinct().Where(m => !exceptErrors.Any(e=>m.StartsWith(e)));

        if (errors.Any()) {
            <div class="errorOnSubmit">
                @foreach(var msg in errors ) {
                    var msgParts = msg.Split('\t').Concat(new []{"",""}).ToArray();
                    var msgKey = msgParts[0].Trim();
                    var msgFormat = messageError.ContainsKey(msgKey) ? messageError[msgKey] : msg;
                    var errorMessage = string.Format(msgFormat, msgParts[1], msgParts[2]);

                    <p class="errorOnSubmitText">@errorMessage</p>
                }
            </div>
        }

        if (viewData.Warnings.Any()) {
            <div class="warningOnSubmit">
                @foreach( var msg in viewData.Warnings ) {
                    <p class="warningOnSubmitText">@(messageError.ContainsKey(msg.Trim()) ? messageError[msg.Trim()] : msg)</p>
                }
            </div>
        }

        if (viewData.Messages.Any()) {
            <div class="successOnSubmit">
                @foreach(var msg in viewData.Messages ){
                    <p class="successOnSubmitText">@(messageError.ContainsKey(msg.Trim()) ? messageError[msg.Trim()] : msg)</p>
                }
            </div>
        }

        if (viewData == null){
            @:@(Page.Html.ValidationSummary()))
        }
      }
}

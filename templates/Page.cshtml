@functions {
    public class ViewModel {
        public string Layout { get; set; }
        public string Partial { get; set; }
        public string Code { get; set; }
        public string Kind { get; set; }
        public string Name { get; set; }
        public string Title { get; set; }
        public string Body { get; set;}
        public string Hero { get; set; }
        public string Thumbnail { get; set; }
        public string MetaTitle { get ;set; }
        public string MetaDescription { get ;set; }
        public string MetaImage { get ;set; }
        public DateTime? PublishDate { get ;set; }
        public List<(string url, string name)> Breadcrumbs { get; set; }
    }

    string[] ParseDirs(string path)
    {
        var dirs = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);

        if (dirs.Length == 0)
        {
            return new[] { "/" };
        }

        if (dirs.Length == 1)
        {
            return new[] { "/", path };
        }

        for (var i = 1; i < dirs.Length; i++)
        {
            dirs[i] = $"{dirs[i - 1]}/{dirs[i]}";
        }

        for (var i = 0; i < dirs.Length; i++)
        {
            dirs[i] = $"/{dirs[i]}";
        }

        dirs[dirs.Length - 1] = path;

        return new[] {"/"}.Concat(dirs).ToArray();
    }

    ViewModel LoadViewModel() {
        var prefix = Href("~/");
        var code = Page.Request.Url.AbsolutePath.TrimEnd('/');
        if (code.StartsWith(prefix)) {
            code = code.Substring(prefix.Length);
        }
        code = "/" + code;

        var vm = Database.Single(new { Now, Next, IsPreview, code }, (db, args) => (
                from p in db.SitePages
                join k in db.SitePageKinds on p.Kind equals k.Code
                where p.Code == args.code
                  &&  p.DisplayStart <= args.Now
                  && (p.DisplayEnd == null || p.DisplayEnd > args.Now)
                  && (p.IsPublished || args.IsPreview)
                select new ViewModel {
                    Layout = k.Layout,
                    Partial = k.Partial,
                    Code = p.Code,
                    Kind = p.Kind,
                    Name = p.Name,
                    Title = p.Title,
                    Body = p.Body,
                    Hero = p.Hero,
                    Thumbnail = p.Thumbnail,
                    MetaTitle = p.MetaTitle,
                    MetaDescription = p.MetaDescription,
                    MetaImage = p.MetaImage,
                    PublishDate = p.PublishDate
                }
            ).FirstOrDefault());

        if (vm == null)
            return null;

        var dirs = ParseDirs(vm.Code);
        vm.Breadcrumbs = 
            Database.Query(new { Now, Next, IsPreview, code }, (db, args) => (
                from p in db.SitePages
                where dirs.Contains(p.Code)
                    &&  p.DisplayStart <= args.Now
                    && (p.DisplayEnd == null || p.DisplayEnd > args.Now)
                    && (p.IsPublished || args.IsPreview)
                orderby p.Code
                select new {
                    p.Code,
                    p.Name,
                }
            )).Select(dir => (dir.Code, dir.Name)).ToList();

        return vm;
    }
}

@{
    var vm = LoadViewModel();

    if (vm == null) {
        throw new System.Web.HttpException(404, "Not Found");
    }

    Layout = vm.Layout;

    ViewBag.Hero = vm.Hero;
    ViewBag.PublishDate = vm.PublishDate;
    ViewBag.Title = vm.Title;
    ViewBag.Name = vm.Name;
    ViewBag.Breadcrumbs = vm.Breadcrumbs;

    ViewBag.PageTitle = vm.Name;
    ViewBag.MetaTitle = vm.MetaTitle;
    ViewBag.MetaDescription = vm.MetaDescription;
    ViewBag.MetaImage = vm.MetaImage;

    var urlPrefix = TopUrl(true);

    ViewBag.Canonical = urlPrefix + vm.Code;

    ViewBag.JsonLd = new[] {
        new Dictionary<string, object> {
            ["@context"] = "https://schema.org/",
            ["@type"] = "BreadcrumbList",
            ["itemListElement"] = new List<Dictionary<string, object>>()
        }
    };
    ViewBag.JsonLd[0]["itemListElement"].AddRange(vm.Breadcrumbs.Select((b,i) => new Dictionary<string, object> {
        ["@type"] = "ListItem",
        ["position"] = i + 1,
        ["name"] = b.name,
        ["item"] = urlPrefix + b.url
    }));
    ViewBag.JsonLd = new List<object>(ViewBag.JsonLd);
}
@Include(vm.Partial, vm)
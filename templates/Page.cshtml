@functions {
    public class ViewModel {
        public string Layout { get; set; }
        public string Partial { get; set; }
        public string Code { get; set; }
        public string Kind { get; set; }
        public string Name { get; set; }
        public string Title { get; set; }
        public string Body { get; set;}
        public string Hero { get; set; }
        public string Thumbnail { get; set; }
        public string MetaTitle { get ;set; }
        public string MetaDescription { get ;set; }
        public string MetaImage { get ;set; }
        public DateTime? PublishDate { get ;set; }
        public List<(string url, string name)> Breadcrumbs { get; set; }
    }

    ViewModel LoadViewModel() {
        var path = ((string)(ViewBag.Code))?.ToLower().TrimEnd('/');
        var code = (((string)ViewBag.RouteName)?.ToLower() + "/" + path).TrimEnd('/');

        var vm = Database.Single(new { Now, Next, IsPreview, code }, (db, args) => (
                from p in db.SitePages
                join k in db.SitePageKinds on p.Kind equals k.Code
                where p.Code == args.code
                  &&  p.DisplayStart <= args.Now
                  && (p.DisplayEnd == null || p.DisplayEnd > args.Now)
                  && (p.IsPublished || args.IsPreview)
                select new ViewModel {
                    Layout = k.Layout,
                    Partial = k.Partial,
                    Code = p.Code,
                    Kind = p.Kind,
                    Name = p.Name,
                    Title = p.Title,
                    Body = p.Body,
                    Hero = p.Hero,
                    Thumbnail = p.Thumbnail,
                    MetaTitle = p.MetaTitle,
                    MetaDescription = p.MetaDescription,
                    MetaImage = p.MetaImage,
                    PublishDate = p.PublishDate
                }
            ).FirstOrDefault());

        if (vm == null)
            return null;

        var dirs = code.Split('/');

        if (dirs.Length > 1) { 
            vm.Breadcrumbs = Database.Query(new { Now, Next, IsPreview, code }, (db, args) => (
                    from p in db.SitePages
                    where dirs.Contains(p.Code)
                      &&  p.DisplayStart <= args.Now
                      && (p.DisplayEnd == null || p.DisplayEnd > args.Now)
                      && (p.IsPublished || args.IsPreview)
                    orderby p.Code
                    select new {
                        p.Code,
                        p.Name,
                    }
                )).Select(dir => (dir.Code, dir.Name)).ToList();
        }
        return vm;
    }
}

@{
    var exts = new [] { ".html", ".txt" };
    if (!Page.Request.Url.AbsolutePath.EndsWith("/") && exts.All(ext => !Page.Request.Url.AbsolutePath.EndsWith(ext))) {
        Page.Response.RedirectPermanent(Page.Request.Url.AbsolutePath + "/" + Page.Request.Url.Query);
    }
    if (exts.Any(ext => Page.Request.Url.AbsolutePath.EndsWith(ext + "/"))) {
        Page.Response.RedirectPermanent(Page.Request.Url.AbsolutePath.TrimEnd('/') + Page.Request.Url.Query);
    }
    if (Page.Request.Url.AbsolutePath.EndsWith("/index.html")) {
        Page.Response.RedirectPermanent(Page.Request.Url.AbsolutePath.Substring(0, Page.Request.Url.AbsolutePath.Length - "/index.html".Length) + Page.Request.Url.Query);
    }

    var vm = LoadViewModel();

    if (vm == null) {
        throw new System.Web.HttpException(404, "Not Found");
    }

    Layout = vm.Layout;

    ViewBag.Hero = vm.Hero;
    ViewBag.PublishDate = vm.PublishDate;
    ViewBag.Title = vm.Title;
    ViewBag.Name = vm.Name;
    ViewBag.Breadcrumbs = vm.Breadcrumbs;

    ViewBag.PageTitle = vm.Name;
    ViewBag.MetaTitle = vm.MetaTitle;
    ViewBag.MetaDescription = vm.MetaDescription;
    ViewBag.MetaImage = vm.MetaImage;

    ViewBag.Canonical = Page.Template.SecuredHost(true) + Page.Request.Url.AbsolutePath;

    ViewBag.JsonLd = new[] {
        new Dictionary<string, object> {
            ["@context"] = "https://schema.org/",
            ["@type"] = "BreadcrumbList",
            ["itemListElement"] = new List<Dictionary<string, object>>()
        }
    };
    ViewBag.JsonLd[0]["itemListElement"].Add(new Dictionary<string, object> {
            ["@type"] = "ListItem",
            ["position"] = 1,
            ["name"] = "HOME",
            ["item"] = Page.Template.SecuredHost(true) + Href("~/")
        });
    if (vm.Breadcrumbs != null) {
        ViewBag.JsonLd[0]["itemListElement"].AddRange(vm.Breadcrumbs.Select((b,i) => new Dictionary<string, object> {
            ["@type"] = "ListItem",
            ["position"] = i + 2,
            ["name"] = b.name,
            ["item"] = Page.Template.SecuredHost(true) + Href("~/" + b.url)
        }));
    }
    ViewBag.JsonLd[0]["itemListElement"].Add(new Dictionary<string, object> {
            ["@type"] = "ListItem",
            ["position"] = ViewBag.JsonLd[0]["itemListElement"].Count + 1,
            ["name"] = vm.Name,
            ["item"] = ViewBag.Canonical
        });
    ViewBag.JsonLd = new List<object>(ViewBag.JsonLd);
}
@Include(vm.Partial, vm)
@functions {
    public class ViewModel {
        public string Code { get; set; }
        public string Kind { get; set; }
        public string KindName { get; set; }
        public string KindIcon { get; set; }
        public string Name { get; set; }
        public string Title { get; set; }
        public string Body { get; set;}
        public string MetaTitle { get ;set; }
        public string MetaDescription { get ;set; }
        public string MetaImage { get ;set; }
        public string Thumbnail { get ;set; }
        public string Icon { get ;set; }
        public int? PriceProductId { get ;set; }
        public bool? HasMultiplePrice { get ;set; }
        public List<ImageViewModel> Images { get; set; }
        public List<ProductViewModel> Products { get; set; }
        public List<TagViewModel> Tags { get; set; }
        public List<RelateProductViewModel> RelateProducts { get; set; }
        public List<RelatePageViewModel> RelatePages { get; set; }
        public ProductViewModel PriceProduct { get; set; }
        public string[] Campaigns { get; set; }
        public string Embed { get; set; }
    }

    public class ImageViewModel {
        public string Alt { get; set; }
        public string LargeUrl { get; set; }
        public string SmallUrl { get; set; }
    }

    public class ProductViewModel {
        public int Id { get; set; }
        public string ExternalId1 { get; set; }
        public string Name { get; set; }
        public string DisplayName { get; set; }
        public string Size { get; set; }
        public string Color { get; set; }
        public string Icon { get; set; }
        public bool Stockout { get; set; }
        public decimal UnitPriceWithTax { get; set; }
        public decimal Point { get;set; }
        public string Valiation() {
            return string.Join("／", new[] {Size, Color}.Where(text => !string.IsNullOrEmpty(text)));
        }
    }

    public class TagViewModel{
        public string Code { get; set; }
        public string Name { get; set; }
        public string Icon { get; set; }
    }

    public class RelateProductViewModel {
        public string Code { get; set; }
        public string Kind { get; set; }
        public string KindName { get; set; }
        public string KindIcon { get; set; }
        public string Name { get; set; }
        public string Thumbnail { get; set; }
        public int? PriceProductId { get; set; }
        public bool? HasMultiplePrice { get; set; }

        public decimal? UnitPriceWithTax { get; set; }
        public string PriceProductExternalId1 { get; set; }
        public string PriceProductName { get; set; }
    }

    public class RelatePageViewModel {
        public string Code { get; set; }
        public string Kind { get; set; }
        public string Name { get; set; }
        public string Thumbnail { get; set; }
        public DateTime? PublishDate { get; set; }
    }

    ViewModel LoadViewModel() {
        var code = ((string)ViewBag.Code)?.ToLower();
        var vm = 
            Database.Single(new { Now, Next, IsPreview, code }, (db, args) => (
                from p in db.ProductPages
                join rk in db.ProductKinds on p.Kind equals rk.Code into kinds
                from k in kinds.DefaultIfEmpty()
                where p.Code.ToLower() == args.code
                  &&  p.DisplayStart <= args.Now
                  && (p.DisplayEnd == null || p.DisplayEnd > args.Now)
                  && (p.IsPublished || args.IsPreview)
                select new ViewModel {
                    Code = args.code,
                    Kind = p.Kind,
                    KindName = string.IsNullOrEmpty(k.DisplayName) ? k.Name : k.DisplayName,
                    KindIcon = k.Icon,
                    Name = p.Name,
                    Title = p.Title,
                    Body = p.Body,
                    MetaTitle = p.MetaTitle,
                    MetaDescription = p.MetaDescription,
                    MetaImage = p.MetaImage,
                    Thumbnail = p.Thumbnail,
                    Icon = p.Icon,
                    PriceProductId = p.PriceProductId,
                    HasMultiplePrice = p.HasMultiplePrice
                }
            ).FirstOrDefault());

        if (vm == null) {
            return null;
        }
        
        vm.Images =
            Database.Query(new { Now, Next, IsPreview, code }, (db, args) => (
                from i in db.ProductImages
                where i.ProductPageCode == args.code
                orderby i.DisplayOrder
                select new ImageViewModel {
                    Alt = i.Alt,
                    LargeUrl = i.LargeUrl,
                    SmallUrl = i.SmallUrl
                }
            )).ToList();
        
        vm.Products =
            Database.Query(new { Now, Next, IsPreview, code }, (db, args) => (
                from r in db.ProductRelations
                join p in db.Products on r.ProductExternalId1 equals p.ExternalId1
                where r.ProductPageCode == args.code
                orderby r.DisplayOrder
                select new ProductViewModel {
                    Id = p.Id,
                    ExternalId1 = p.ExternalId1,
                    Name = string.IsNullOrEmpty(p.DisplayName) ? p.Name : p.DisplayName,
                    Size = p.Size,
                    Color = p.Color,
                    Icon = p.Icon,
                    Stockout = p.Stockout,
                }
            )).ToList();
        
        vm.Tags =
            Database.Query(new { Now, Next, IsPreview, code }, (db, args) => (
                from r in db.ProductTagRelations
                join t in db.ProductTags on r.ProductTagCode equals t.Code
                where r.ProductPageCode == args.code
                  && (t.IsPublished || args.IsPreview)
                orderby r.DisplayOrder
                select new TagViewModel {
                    Code = t.Code,
                    Name = string.IsNullOrEmpty(t.DisplayName) ? t.Name : t.DisplayName,
                    Icon = t.Icon
                }
            )).ToList();
        
        vm.RelateProducts =
            Database.Query(new { Now, Next, IsPreview, code }, (db, args) => (
                from r in db.ProductPageRelations
                join p in db.ProductPages on r.RelateCode equals p.Code
                join rk in db.ProductKinds on p.Kind equals rk.Code into kinds
                from k in kinds.DefaultIfEmpty()
                join rs in db.Products on p.PriceProductId equals rs.Id into representatives
                from s in representatives.DefaultIfEmpty()
                where r.Code.ToLower() == args.code
                  &&  p.DisplayStart <= args.Now
                  && (p.DisplayEnd == null || p.DisplayEnd > args.Now)
                  && (p.IsPublished || args.IsPreview)
                orderby p.RecommendIndex descending, p.RankingIndex
                select new RelateProductViewModel {
                    Code = p.Code,
                    Kind = p.Kind,
                    KindName = string.IsNullOrEmpty(k.DisplayName) ? k.Name : k.DisplayName,
                    KindIcon = k.Icon,
                    Name = p.Name,
                    Thumbnail = p.Thumbnail,
                    HasMultiplePrice = p.HasMultiplePrice,
                    PriceProductId = p.PriceProductId,
                    PriceProductExternalId1 =  s.ExternalId1,
                    PriceProductName = s.Name,
                }
            )).ToList();

        vm.RelatePages =
            Database.Query(new { Now, Next, IsPreview, code }, (db, args) => (
                from r in db.SitePageRelations
                join p in db.SitePages on r.SitePageCode equals p.Code
                where r.ProductPageCode.ToLower() == args.code
                  &&  p.DisplayStart <= args.Now
                  && (p.DisplayEnd == null || p.DisplayEnd > args.Now)
                  && (p.IsPublished || args.IsPreview)
                orderby p.Priority descending
                select new RelatePageViewModel {
                    Code = p.Code,
                    Kind = p.Kind,
                    Name = p.Name,
                    Thumbnail = p.Thumbnail,
                    PublishDate = p.PublishDate
                }
            )).ToList();
        
        foreach (var p in vm.Products) {
            p.UnitPriceWithTax = Page.Template.GetUnitPriceWithTax(p.Id);
        }
        foreach (var p in vm.RelateProducts) {
            if (p.PriceProductId.HasValue) {
                p.UnitPriceWithTax = Page.Template.GetUnitPriceWithTax(p.PriceProductId.Value);
            }
        }

        if (vm.PriceProductId.HasValue) {
            vm.PriceProduct = vm.Products.Where(p => p.Id == vm.PriceProductId).FirstOrDefault();
            if (vm.PriceProduct != null) {
                vm.PriceProduct.Point = (int)vm.PriceProduct.UnitPriceWithTax * Page.Template.GetPointChargeRate(vm.PriceProductId.Value) / 100;
            }
        }

        vm.Campaigns = vm.Products.SelectMany(p => Page.Template.GetProductCampaigns(p.Id).Select(c => c.CampaignName)).Distinct().ToArray();

        vm.Embed = $"<iframe src=\"{EmbedUrl(vm.Code)}\" title=\"{vm.Name}\" style=\"border:none;width;300px;height:150px;\" scrolling=\"no\" allow=\"autoplay; encrypted-media\"></iframe>";

        return vm;
    }
}

@{
    var vm = LoadViewModel();

    if (vm == null) {
        throw new System.Web.HttpException(404, "Not Found");
    }

    ViewBag.MetaTitle = vm.MetaTitle ?? vm.Name;
    ViewBag.MetaDescription = vm.MetaDescription;
    ViewBag.MetaImage = vm.MetaImage ?? vm.Thumbnail ?? vm.Icon ?? vm.Images.FirstOrDefault()?.LargeUrl;
    ViewBag.JsonLd = new[] {
        new Dictionary<string, object> {
            ["@context"] = "https://schema.org/",
            ["@type"] = "BreadcrumbList",
            ["itemListElement"] = new [] {
                new Dictionary<string, object> {
                    ["@type"] = "ListItem",
                    ["position"] = 1,
                    ["name"] = "Top",
                    ["item"] = Page.Template.SecuredHost(true) + Href("~/")
                },
                new Dictionary<string, object> {
                    ["@type"] = "ListItem",
                    ["position"] = 2,
                    ["name"] = vm.KindName,
                    ["item"] = Page.Template.SecuredHost(true) + Href("~/category/") + vm.Kind
                },
                new Dictionary<string, object> {
                    ["@type"] = "ListItem",
                    ["position"] = 3,
                    ["name"] = vm.Name,
                    ["item"] = Page.Template.SecuredHost(true) + Page.Request.Url.AbsolutePath
                },
            }
        },
        new Dictionary<string, object> {
            ["@context"] = "https://schema.org/",
            ["@type"] = "Product",
            ["name"] = vm.Name,
            ["image"] = vm.Images,
            ["description"] = ViewBag.MetaDescription,
            ["sku"] = vm.PriceProduct?.ExternalId1,
            ["mpn"] = vm.PriceProduct?.ExternalId1, // Manufacturer Part Number 製品番号
            ["category"] = "Category",
            ["brand"] = new Dictionary<string, object> {
                ["@type"] = "Brand",
                ["name"] = "",
                ["url"] = "",
                ["logo"] = "",
                ["slogan"] = ""
            },
            ["offers"] = new Dictionary<string, object> {
                ["@type"] = "Offer",
                ["url"] = Page.Template.SecuredHost(true) + Page.Request.Url.AbsolutePath,
                ["priceCurrency"] = "JPY",
                ["price"] = vm.PriceProduct?.UnitPriceWithTax,
                // ["priceValidUntil"] = "yyyy-MM-dd",
                ["itemCondition"] = "https://schema.org/NewCondition",
                ["availability"] = false ? "https://schema.org/OutOfStock" : "https://schema.org/InStock",
                ["seller"] = new Dictionary<string, object> {
                    ["@type"] = "Organization",
                    ["name"] = ""
                }
            }
        }
    };
    ViewBag.DataLayer = new object[] {
        // 以下のペイロードはGA4なのでユニバーサルアナライティクスではない
        new {
            @event = "view_item",
            ecommerce = new {
                details = vm.Products.Select(p => new { 
                    item_name = p.Name,
                    item_id = p.ExternalId1,
                    item_category = vm.Kind,
                    price = p.UnitPriceWithTax.ToString("F0"),
                })
            }
        },
        new {
            @event = "view_item_list",
            ecommerce = new {
                impressions = vm.RelateProducts.Select((p, index) => new { 
                    item_name = p.PriceProductName,
                    item_id = p.PriceProductExternalId1,
                    item_category = p.Kind,
                    item_list_name = $"Relate Products of {vm.Name}",
                    item_list_id = $"{vm.Code}:RelateProducts",
                    price = p.UnitPriceWithTax?.ToString("F0"),
                    index = index + 1,
                })
            }
        },
    };
}
<main class="section product-detail content-wide">
    <div class="product-summary">
        <h1 class="title text-center">@PrintTitleOrName(vm.Title, vm.Name)</h1>
        <p class="product-price text-center">
            @PrintPrice(vm.PriceProduct?.UnitPriceWithTax, vm.HasMultiplePrice)
            @PrintPoint(vm.PriceProduct?.Point, vm.HasMultiplePrice)
        </p>
        <div class="block block-horizontal block-wrap">
            <a href="@KindUrl(vm.Kind)" class="badge">
                @if (!string.IsNullOrEmpty(vm.KindIcon)) {
                    if (vm.KindIcon.StartsWith("https://")) {
                        <img class="badge-icon" src="@vm.KindIcon" alt="vm.KindName" loading="lazy" decoding="async">
                    } else {
                        <i class="badge-icon @vm.KindIcon"></i>
                    }
                }
                @vm.KindName
            </a>
    
            @foreach (var tag in vm.Tags) {
                <a href="@TagUrl(tag.Code)" class="badge">#@tag.Name</a>
            }
        </div>
        @if (vm.Campaigns.Length > 0) {
            <p class="text-center">キャンペーン開催中：@string.Join(",", vm.Campaigns)</p>
        }
        <form action="@CartUrl()" method="get">
             @if (vm.Products.Count > 1) {
                <hr>
                <table class="product-skus">
                    <thead>
                        <tr>
                            <th></th>
                            @foreach(var colorGroup in vm.Products.GroupBy(p => p.Color)) {
                                <th>
                                    @if (string.IsNullOrEmpty(colorGroup.First().Icon)){
                                        <text>@colorGroup.Key</text>
                                    }
                                    else {
                                        <div class="product-icon icon-small">
                                            <div class="image image-square">
                                                <img src="@IconUrl(colorGroup.First().Icon)" alt="@colorGroup.Key" loading="lazy" decoding="async" crossorigin="anonymous">
                                            </div>
                                        </div>
                                        @colorGroup.Key
                                    }
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sizeGroup in vm.Products.GroupBy(p => p.Size)) {
                            <tr>
                                <th>@sizeGroup.Key</th>
                                @foreach(var colorGroup in vm.Products.GroupBy(p => p.Color)) {
                                    var sku = sizeGroup.Where(p => p.Color == colorGroup.Key).FirstOrDefault();
                                    <td>
                                        @if (sku != null) {
                                            <text>@FormatPrice(sku.UnitPriceWithTax)<br></text>
                                            if (sku.Stockout) {
                                                if (Page.Template.CanReserveRequest(sku.Id)) {
                                                    <a href="@ReserveCreateUrl(sku.Id)">次回入荷分を予約</a>
                                                } 
                                                else {
                                                    <text>&times;</text>
                                                }
                                            }
                                            else {
                                                var gtm = new {
                                                    @event = "add_to_cart",
                                                    ecommerce = new {
                                                        items = new [] {
                                                            new {
                                                                item_name = sku.Name,
                                                                item_id = sku.ExternalId1,
                                                                item_category = vm.Kind,
                                                                price = sku.UnitPriceWithTax.ToString("F0"),
                                                                quantity = 1,
                                                            }
                                                        }
                                                    }
                                                };
                                                <label>
                                                    <input type="radio" name="item" value="@sku.Id"
                                                        data-val="true"
                                                        data-val-required="商品を選択してください。"
                                                        data-gtm="@Jil.JSON.Serialize(gtm)"
                                                        aria-label="@sku.Color @sku.Size">
                                                    <span class="text"></span>
                                                </label>
                                            }
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
                @ValidationMessageFor("item")
            }
            else {
                <input type="hidden" name="item" value="@(vm.Products?.FirstOrDefault()?.Id)">
            }
            <hr>
            <div class="block block-vertical">
                <button type="submit" class="btn btn-primary btn-large full" @when(!vm.Products.Any(sku => !sku.Stockout), "disabled")>カートに入れる</button>
                @if (vm.PriceProductId.HasValue) {
                    <a href="@FavoriteCreateUrl(vm.PriceProductId.Value)" class="btn btn-primary btn-text">お気に入りに追加する</a>
                }
            </div>
        </form>
    </div>
    <div class="product-description content">
        <h2 class="title text-center">商品説明</h2>
        @Raw(vm.Body ?? string.Empty)
        <details class="text-right">
            <summary class="btn btn-primary btn-text">埋め込みコード使用してシェアする</summary>
            <div class="block">
                <textarea rows="5" readonly aria-label="埋め込みコード">@vm.Embed</textarea>
            </div>
        </details>
    </div>
    <div class="carousel product-image">
        <ul class="carousel-images">
            @foreach(var (img, index) in vm.Images.Select((img, index) => (img, index))) {
                <li id="carousel-frame-@index" class="carousel-frame image image-square">
                    <img src="@LargeImageUrl(img.LargeUrl)" alt="@(img.Alt ?? vm.Name)" loading="lazy" decoding="async" crossorigin="anonymous">
                </li>
            }
        </ul>
        <div class="carousel-thumbnails">
            @foreach(var (img, index) in vm.Images.Select((img, index) => (img, index))) {
                <a href="#carousel-frame-@index" target="_self">
                    <div class="image image-square">
                        <img src="@SmallImageUrl(img.SmallUrl)" alt="@(img.Alt ?? vm.Name)" width="64" height="64" loading="lazy" decoding="async" crossorigin="anonymous">
                    </div>
                </a>
            }
        </div>
    </div>
</main>
@if (vm.RelateProducts.Any()) {
<aside class="section content">
    <h1 class="h-border text-center">関連商品</h1>
    @TileList(vm.RelateProducts, columns:4, slot:(item, index) =>
        ProductTile(
            item.Code,
            item.Name,
            item.KindName,
            item.KindIcon,
            item.Thumbnail,
            item.UnitPriceWithTax,
            item.HasMultiplePrice,
            gtm: new {
                @event = "select_item",
                ecommerce = new {
                    items = new [] {
                        new { 
                            item_name = item.PriceProductName,
                            item_id = item.PriceProductExternalId1,
                            item_category = item.Kind,
                            item_list_name = $"Relate Products of {vm.Name}",
                            item_list_id = $"{vm.Code}:RelateProducts",
                            price = item.UnitPriceWithTax?.ToString("F0"),
                            index = index + 1,
                        } 
                    }
                }
            }
        )
    )
</aside>
}

@if (vm.RelatePages.Any()) {
<aside class="section content">
    <h1 class="h-border text-center">関連ページ</h1>
    @TileList(vm.RelatePages, columns:2, slot:(item, index) => 
        TopicTile(
            item.Code,
            item.Kind,
            item.Name,
            item.Thumbnail,
            item.PublishDate
        )
    )
</aside>
}
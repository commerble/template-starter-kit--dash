@functions {
    public class ViewModel {
        public TagViewModel TopTag { get; set; }
        public BannerViewModel MainBanner { get; set; }
        public List<BannerViewModel> SubBanners { get; set; }
        public List<NoticeViewModel> Notices { get; set; }
        public List<ProductPageViewModel> ProductPages { get; set; }
        public List<TagViewModel> Tags { get; set; }
    }
    public class BannerViewModel {
        public string Title { get; set; }
        public string Subtitle { get; set; }
        public string LinkText { get; set; }
        public string LinkUrl { get; set; }
        public string Thumbnail { get; set; }
    }
    public class NoticeViewModel {
        public string Code { get; set; }
        public string Kind { get; set; }
        public string Name { get; set; }
        public string Title { get; set; }
        public int Priority { get; set; }
        public string PriorityName { get; set; }
        public string Thumbnail { get; set; }
        public DateTime? PublishDate { get; set; }
    }
    public class ProductPageViewModel {
        public string Code { get; set; }
        public string Kind { get; set; }
        public string KindName { get; set; }
        public string KindIcon { get; set; }
        public string Name { get; set; }
        public string Thumbnail { get; set; }
        public int? PriceProductId { get; set; }
        public bool? HasMultiplePrice { get; set; }
        public decimal? UnitPriceWithTax { get; set; }
        public string PriceProductExternalId1 {get; set;}
        public string PriceProductName {get; set;}
    }
    public class TagViewModel {
        public string Code { get; set; }
        public string Name { get; set; }
    }
    ViewModel LoadViewModel() {
        var mainBanner = 
            Database.Single(new { Now, Next, IsPreview }, (db, args) => (
                from b in db.Banners
                where b.Kind == "Main" 
                &&  b.DisplayStart <= args.Now
                && (b.DisplayEnd == null || b.DisplayEnd > args.Now)
                && (b.IsPublished == true || args.IsPreview)
                orderby b.DisplayStart descending, b.DisplayOrder
                select new BannerViewModel {
                    Title = b.Title,
                    Subtitle = b.Subtitle,
                    LinkUrl = b.LinkUrl,
                    LinkText = b.LinkText,
                    Thumbnail = b.Thumbnail
                }
            ).FirstOrDefault());
        var subBanners = 
            Database.Query(new { Now, Next, IsPreview }, (db, args) => (
                from b in db.Banners
                where b.Kind == "Sub" 
                &&  b.DisplayStart <= args.Now
                && (b.DisplayEnd == null || b.DisplayEnd > args.Now)
                && (b.IsPublished == true || args.IsPreview)
                orderby b.DisplayStart descending, b.DisplayOrder
                select new BannerViewModel {
                    Title = b.Title,
                    Subtitle = b.Subtitle,
                    LinkUrl = b.LinkUrl,
                    LinkText = b.LinkText,
                    Thumbnail = b.Thumbnail
                }
            ).Take(4)).ToList();
        var notices =
            Database.Query(new { Now, Next, IsPreview }, (db, args) => (
                from p in db.SitePages
                join q in db.SitePagePriorities on p.Priority equals q.Priority
                where p.Kind == "Notice" 
                &&  p.DisplayStart <= args.Now
                && (p.DisplayEnd == null || p.DisplayEnd > args.Now)
                && (p.IsPublished == true || args.IsPreview)
                orderby p.Priority descending, p.DisplayStart descending
                select new NoticeViewModel {
                    Code = p.Code,
                    Kind = p.Kind,
                    Name = p.Name,
                    Title = p.Title,
                    Priority = p.Priority,
                    PriorityName = q.Name,
                    Thumbnail = p.Thumbnail,
                    PublishDate = p.PublishDate,
                }
            ).Take(3)).ToList();
        var tag =
            Database.Single(new { Now, Next, IsPreview, tag = GetConfigValue("TOP_TAG") }, (db, args) => (
                from t in db.ProductTags
                where t.Code == args.tag
                select new TagViewModel {
                    Code = t.Code.ToLower(),
                    Name = string.IsNullOrEmpty(t.DisplayName) ? t.Name : t.DisplayName,
                }
            ).FirstOrDefault());
        var items =
            Database.Query(new { Now, Next, IsPreview, tag = tag?.Code }, (db, args) => (
                from p in db.ProductPages
                join r in db.ProductTagRelations on p.Code equals r.ProductPageCode
                join rk in db.ProductKinds on p.Kind equals rk.Code into kinds
                from k in kinds.DefaultIfEmpty()
                join rs in db.Products on p.PriceProductId equals rs.Id into skus
                from s in skus.DefaultIfEmpty()
                where r.ProductTagCode == args.tag
                   &&  p.DisplayStart <= Now 
                   && (p.DisplayEnd == null || p.DisplayEnd > Now)
                   && (p.IsPublished || IsPreview)
                orderby p.RecommendIndex descending
                select new ProductPageViewModel {
                    Code = p.Code,
                    Kind = p.Kind,
                    KindName = k == null ? null : string.IsNullOrEmpty(k.DisplayName) ? k.Name : k.DisplayName,
                    KindIcon = k == null ? null : k.Icon,
                    Name = p.Name,
                    Thumbnail = p.Thumbnail,
                    PriceProductId = p.PriceProductId,
                    HasMultiplePrice = p.HasMultiplePrice,
                    PriceProductExternalId1 = s == null ? null : s.ExternalId1,
                    PriceProductName = s == null ? null : s.Name
                }
            ).Take(12)).ToList();
        foreach (var item in items) {
            if (item.PriceProductId.HasValue) {
                item.UnitPriceWithTax = Page.Template.GetUnitPriceWithTax(item.PriceProductId.Value);
            }
        }
        return new ViewModel {
            MainBanner = mainBanner,
            SubBanners = subBanners,
            Notices = notices,
            ProductPages = items,
            TopTag = tag,
            Tags = Tags.Take(20).Select(t => new TagViewModel { 
                Code = t.Code,
                Name = t.Name,
            }).ToList()
        };
    }
}
@{
    var vm = LoadViewModel();

    ViewBag.PageTitle = "トップ ";
    ViewBag.DataLayer = new object[] { new {
        @event = "view_item_list",
        ecommerce = new {
            impressions = vm.ProductPages.Select((p, index) => new {
                item_name = p.PriceProductName,
                item_id = p.PriceProductExternalId1,
                price = p.UnitPriceWithTax?.ToString(),
                item_category = p.Kind,
                item_list_name = "TOP",
                item_list_id = "TOP",
                index = index + 1,
            })
        }
    }};
}
@if (vm.MainBanner != null) {
    <div class="section withoutTopMargin">
        <ul class="siteTopSlider">
            <li class="bgImageContainer" style="background-image:url('@vm.MainBanner.Thumbnail')">
                <div class="textBlock">
                    <div class="textBlockContents pullAside">
                        @if (!string.IsNullOrEmpty(vm.MainBanner.Title)) {
                            <p class="title textShadow">@vm.MainBanner.Title</p>
                        }
                        @if (!string.IsNullOrEmpty(vm.MainBanner.Subtitle)) {
                            <p class="lead textShadow">@vm.MainBanner.Subtitle</p>
                        }
                        @if (!string.IsNullOrEmpty(vm.MainBanner.LinkUrl)) {
                            <div class="buttonContainer">
                                <a href="@Href(vm.MainBanner.LinkUrl)" class="btAccent btLargeSize">@(vm.MainBanner.LinkText ?? "詳細を見る")</a>
                            </div>
                        }
                    </div>
                </div>
            </li>
        </ul>
    </div>
}

@if (vm.SubBanners.Any()) {
    <section class="section withoutTopMargin">
        <div class="inner">
            <ul class="productTileList grid grid-pc-x4 grid-tb-x2 grid-sp-x2 recommend">
                @foreach(var banner in vm.SubBanners) {
                    <li class="productTile">
                        <a href="@Href(banner.LinkUrl)">
                            <div class="productTileImage">
                                <img src="@ThumbnailUrl(banner.Thumbnail)" loading="lazy" alt="@banner.Title">
                            </div>
                            <div class="productTileText">
                                <p class="productName">@banner.Title</p>
                            </div>
                        </a>
                    </li>
                }
            </ul>
        </div>
    </section>
}

@if (vm.Notices.Count > 0) {
    @SectionBlock("NEWS", () =>
        Concat(
            () => TopicTileList(vm.Notices, slot:(notice, index) =>
                    TopicTile(
                        notice.Code,
                        notice.Kind,
                        notice.Name,
                        notice.Thumbnail,
                        notice.PublishDate
                    ))
            ,() => LinkAnnex("すべてのNEWSを読む", Href("~/news"))
        ))
}

@if (vm.TopTag != null) {
    @SectionBlock(vm.TopTag.Name, () =>
        Concat(
            () => ProductTileList(vm.ProductPages, klass:"grid-pc-x6 grid-tb-x2 grid-sp-x2", slot:(item, index) =>
                    ProductTile(
                        item.Code,
                        item.Name,
                        item.KindName,
                        item.KindIcon,
                        item.Thumbnail,
                        item.UnitPriceWithTax,
                        item.HasMultiplePrice,
                        gtm: new {
                            @event = "select_item",
                            ecommerce = new {
                                items = new [] {
                                    new { 
                                        item_name = item.PriceProductName,
                                        item_id = item.PriceProductExternalId1,
                                        item_category = item.Kind,
                                        item_list_name = "TOP",
                                        item_list_id = "TOP",
                                        price = item.UnitPriceWithTax?.ToString("F0"),
                                        index = index + 1,
                                    } 
                                }
                            }
                        } 
                    )),
            () => ButtonBlock("もっと見る", href:TagUrl(vm.TopTag.Code,"rcm_desc"), btAccent:true, btLargeSize:true, btNext:true)
        )
    )
}

@if (vm.Tags.Count > 0) {
    <section class="section">
        <div class="inner">
            <h2 class="sectionTitle">タグから探す</h2>
            <p class="text tagList flexBoxCenter" style="font-size:18px;">
                @foreach(var tag in vm.Tags) {
                    <text><a href="@TagUrl(tag.Code,"rcm_desc")" class="tag">#@tag.Name</a> &nbsp;</text>
                }
            </p>
        </div>
    </section>
}

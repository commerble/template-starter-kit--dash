@functions {
    public class ViewModel {
        public TagViewModel TopTag { get; set; }
        public BannerViewModel MainBanner { get; set; }
        public List<BannerViewModel> SubBanners { get; set; }
        public List<NoticeViewModel> Notices { get; set; }
        public List<ProductPageViewModel> ProductPages { get; set; }
        public List<TagViewModel> Tags { get; set; }
    }
    public class BannerViewModel {
        public string Title { get; set; }
        public string Subtitle { get; set; }
        public string LinkText { get; set; }
        public string LinkUrl { get; set; }
        public string Thumbnail { get; set; }
    }
    public class NoticeViewModel {
        public string Code { get; set; }
        public string Kind { get; set; }
        public string Name { get; set; }
        public string Title { get; set; }
        public int Priority { get; set; }
        public string PriorityName { get; set; }
        public string Thumbnail { get; set; }
        public DateTime? PublishDate { get; set; }
    }
    public class ProductPageViewModel {
        public string Code { get; set; }
        public string Kind { get; set; }
        public string KindName { get; set; }
        public string KindIcon { get; set; }
        public string Name { get; set; }
        public string Thumbnail { get; set; }
        public int? PriceProductId { get; set; }
        public bool? HasMultiplePrice { get; set; }
        public decimal? UnitPriceWithTax { get; set; }
        public string PriceProductExternalId1 {get; set;}
        public string PriceProductName {get; set;}
    }
    public class TagViewModel {
        public string Code { get; set; }
        public string Name { get; set; }
        public string Title { get; set; }
    }
    ViewModel LoadViewModel() {
        var mainBanner = 
            Database.Single(new { Now, Next, IsPreview }, (db, args) => (
                from b in db.Banners
                where b.Kind == "Main" 
                &&  b.DisplayStart <= args.Now
                && (b.DisplayEnd == null || b.DisplayEnd > args.Now)
                && (b.IsPublished == true || args.IsPreview)
                orderby b.DisplayStart descending, b.DisplayOrder
                select new BannerViewModel {
                    Title = b.Title,
                    Subtitle = b.Subtitle,
                    LinkUrl = b.LinkUrl,
                    LinkText = b.LinkText,
                    Thumbnail = b.Thumbnail
                }
            ).FirstOrDefault());
        var subBanners = 
            Database.Query(new { Now, Next, IsPreview }, (db, args) => (
                from b in db.Banners
                where b.Kind == "Sub" 
                &&  b.DisplayStart <= args.Now
                && (b.DisplayEnd == null || b.DisplayEnd > args.Now)
                && (b.IsPublished == true || args.IsPreview)
                orderby b.DisplayStart descending, b.DisplayOrder
                select new BannerViewModel {
                    Title = b.Title,
                    Subtitle = b.Subtitle,
                    LinkUrl = b.LinkUrl,
                    LinkText = b.LinkText,
                    Thumbnail = b.Thumbnail
                }
            ).Take(4)).ToList();

        var notices =
            Database.Query(new { Now, Next, IsPreview }, (db, args) => (
                from p in db.SitePages
                join q in db.SitePagePriorities on p.Priority equals q.Priority
                where p.Kind == "news"
                  &&  p.IsListed
                  &&  p.DisplayStart <= args.Now
                  && (p.DisplayEnd == null || p.DisplayEnd > args.Now)
                  && (p.IsPublished == true || args.IsPreview)
                orderby p.Priority descending, p.DisplayStart descending, p.DisplayOrder
                select new NoticeViewModel {
                    Code = p.Code,
                    Kind = p.Kind,
                    Name = p.Name,
                    Title = p.Title,
                    Priority = p.Priority,
                    PriorityName = q.Name,
                    Thumbnail = p.Thumbnail,
                    PublishDate = p.PublishDate,
                }
            ).Take(3)).ToList();
        var tag =
            Database.Single(new { Now, Next, IsPreview, tag = GetConfigValue("TOP_TAG") }, (db, args) => (
                from p in db.SitePages
                where p.Code == args.tag
                select new TagViewModel {
                    Code = p.Code.ToLower(),
                    Name = p.Name,
                    Title = p.Title,
                }
            ).FirstOrDefault());
        var items =
            Database.Query(new { Now, Next, IsPreview, tag = tag?.Code }, (db, args) => (
                from r in db.PageRelations
                join p in db.SitePages on r.RelateCode equals p.Code
                join m in db.Search on p.Code equals m.PageCode
                join s in db.Products on m.PriceProductId equals s.Id into skus
                from s in skus.DefaultIfEmpty()
                where  r.PageCode == args.tag
                   &&  p.DisplayStart <= Now 
                   && (p.DisplayEnd == null || p.DisplayEnd > Now)
                   && (p.IsPublished || IsPreview)
                orderby m.RecommendIndex descending
                select new ProductPageViewModel {
                    Code = p.Code,
                    Name = p.Name,
                    Thumbnail = p.Thumbnail,
                    PriceProductId = m.PriceProductId,
                    HasMultiplePrice = m.HasMultiplePrice,
                    PriceProductExternalId1 = s.ExternalId1,
                    PriceProductName = s.Name
                }
            ).Take(12)).ToList();
        foreach (var item in items) {
            if (item.PriceProductId.HasValue) {
                item.UnitPriceWithTax = Page.Template.GetUnitPriceWithTax(item.PriceProductId.Value);
            }
        }
        return new ViewModel {
            MainBanner = mainBanner,
            SubBanners = subBanners,
            Notices = notices,
            ProductPages = items,
            TopTag = tag,
            Tags = Tags.Where(t => t.IsListed).Take(20).Select(t => new TagViewModel { 
                Code = t.Code,
                Name = t.Name,
            }).ToList()
        };
    }
}
@{
    var vm = LoadViewModel();

    ViewBag.MetaTitle = "トップ ";
    ViewBag.DataLayer = new object[] { new {
        @event = "view_item_list",
        ecommerce = new {
            impressions = vm.ProductPages.Select((p, index) => new {
                item_name = p.PriceProductName,
                item_id = p.PriceProductExternalId1,
                price = p.UnitPriceWithTax?.ToString(),
                item_category = p.Kind,
                item_list_name = "TOP",
                item_list_id = "TOP",
                index = index + 1,
            })
        }
    }};
}
@if (vm.MainBanner != null) {
    <section class="section hero">
        <div class="image image-top hero-bgimage">
            <img src="@vm.MainBanner.Thumbnail">
            @if (!string.IsNullOrEmpty(vm.MainBanner.Title) 
                || !string.IsNullOrEmpty(vm.MainBanner.Subtitle) 
                || !string.IsNullOrEmpty(vm.MainBanner.LinkUrl)) {
                <div class="hero-text">
                    @if (!string.IsNullOrEmpty(vm.MainBanner.Title)) {
                        <p class="title">@vm.MainBanner.Title</p>
                    }
                    @if (!string.IsNullOrEmpty(vm.MainBanner.Subtitle)) {
                        <p class="lead">@vm.MainBanner.Subtitle</p>
                    }
                    @if (!string.IsNullOrEmpty(vm.MainBanner.LinkUrl)) {
                        <div class="block">
                            <a href="@Href(vm.MainBanner.LinkUrl)" class="btn btn-ghost btn-primary btn-large">@(vm.MainBanner.LinkText ?? "詳細を見る")</a>
                        </div>
                    }
                </div>
            }
        </div>
        @if (vm.SubBanners.Any()) {
            <div class="content">
                <div class="tiles tiles-x4">
                    @foreach(var banner in vm.SubBanners) {
                        <article class="tile">
                            <a href="@Href(banner.LinkUrl)" rel="bookmark" title="@banner.Title">
                                <h1>@banner.Title</h1>
                                <figure class="image image-square">
                                    <img src="@ThumbnailUrl(banner.Thumbnail)" alt="@banner.Title" loading="lazy" decoding="async">
                                </figure>
                            </a>
                        </article>
                    }
                </div>
            </div>
        }
    </section>
}

@if (vm.Notices.Count > 0) {
    <section class="section content">
        <h1 class="h-border text-center">NEWS</h1>
        @TileList(vm.Notices, columns: 3, slot:(notice, index) =>
            TopicTile(
                notice.Code,
                notice.Name,
                notice.Thumbnail,
                notice.PublishDate
            ))
        <div class="block">
            <a href="@Href("~/news/")" class="btn btn-text btn-primary btn-next">すべてのお知らせを見る</a>
        </div>
    </section>
}

@if (vm.TopTag != null) {
    <section class="section content">
        <h1 class="h-border text-center">
            @Raw(vm.TopTag.Title)
        </h1>
        @TileList(vm.ProductPages, columns: 4, slot:(item, index) =>
            ProductTile(
                item.Code,
                item.Name,
                item.Thumbnail,
                item.UnitPriceWithTax,
                item.HasMultiplePrice,
                gtm: new {
                    @event = "select_item",
                    ecommerce = new {
                        items = new [] {
                            new { 
                                item_name = item.PriceProductName,
                                item_id = item.PriceProductExternalId1,
                                item_category = item.Kind,
                                item_list_name = "TOP",
                                item_list_id = "TOP",
                                price = item.UnitPriceWithTax?.ToString("F0"),
                                index = index + 1,
                            } 
                        }
                    }
                } 
            ))
        <div class="block">
            <a href="@TagUrl(vm.TopTag.Code)" class="btn btn-ghost btn-primary btn-next">もっと見る</a>
        </div>
    </section>
}

@if (vm.Tags.Count > 0) {
    <section class="section content">
        <h1 class="h-border text-center">タグから探す</h1>
        <div class="block block-horizontal block-wrap">
            @foreach(var tag in vm.Tags) {
                <a href="@TagUrl(tag.Code)" class="badge">#@tag.Name</a>
            }
        </div>
    </section>
}
